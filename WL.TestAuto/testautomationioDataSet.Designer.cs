//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WL.TestAuto {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("testautomationioDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class testautomationioDataSet : global::System.Data.DataSet {
        
        private Phase2TestSuiteDataTable tablePhase2TestSuite;
        
        private SmokeTestSuiteDataTable tableSmokeTestSuite;
        
        private ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen;
        
        private ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English;
        
        private ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French;
        
        private ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen;
        
        private ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen;
        
        private ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction;
        
        private ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess;
        
        private ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments;
        
        private ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import;
        
        private ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports;
        
        private ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy;
        
        private ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement;
        
        private ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor;
        
        private ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group;
        
        private ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level;
        
        private ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template;
        
        private ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode;
        
        private ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance;
        
        private ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable tableZHRX_CAN_HR_UI_001900_Admin_Code_System;
        
        private ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor;
        
        private ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor;
        
        private ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP;
        
        private ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config;
        
        private ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable tableZHRX_CAN_HR_UI_002400_Admin_Security;
        
        private ZHRX_CAN_HR_UI_002500_HelpDataTable tableZHRX_CAN_HR_UI_002500_Help;
        
        private ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee;
        
        private ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record;
        
        private ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record;
        
        private ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group;
        
        private ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable tableZHRX_CAN_Payroll_001200_Calculate_Payroll;
        
        private ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding;
        
        private ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary;
        
        private ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes;
        
        private ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public testautomationioDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected testautomationioDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Phase2TestSuite"] != null)) {
                    base.Tables.Add(new Phase2TestSuiteDataTable(ds.Tables["Phase2TestSuite"]));
                }
                if ((ds.Tables["SmokeTestSuite"] != null)) {
                    base.Tables.Add(new SmokeTestSuiteDataTable(ds.Tables["SmokeTestSuite"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable(ds.Tables["ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable(ds.Tables["ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable(ds.Tables["ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable(ds.Tables["ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable(ds.Tables["ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable(ds.Tables["ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable(ds.Tables["ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable(ds.Tables["ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable(ds.Tables["ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable(ds.Tables["ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable(ds.Tables["ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable(ds.Tables["ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable(ds.Tables["ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable(ds.Tables["ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable(ds.Tables["ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable(ds.Tables["ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable(ds.Tables["ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable(ds.Tables["ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001900_Admin_Code_System"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable(ds.Tables["ZHRX_CAN_HR_UI_001900_Admin_Code_System"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable(ds.Tables["ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_002100_Admin_Language_Editor"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable(ds.Tables["ZHRX_CAN_HR_UI_002100_Admin_Language_Editor"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_002200_Admin_Export_FTP"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable(ds.Tables["ZHRX_CAN_HR_UI_002200_Admin_Export_FTP"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable(ds.Tables["ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_002400_Admin_Security"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable(ds.Tables["ZHRX_CAN_HR_UI_002400_Admin_Security"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_002500_Help"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_002500_HelpDataTable(ds.Tables["ZHRX_CAN_HR_UI_002500_Help"]));
                }
                if ((ds.Tables["ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable(ds.Tables["ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee"]));
                }
                if ((ds.Tables["ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable(ds.Tables["ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record"]));
                }
                if ((ds.Tables["ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable(ds.Tables["ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record"]));
                }
                if ((ds.Tables["ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable(ds.Tables["ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group"]));
                }
                if ((ds.Tables["ZHRX_CAN_Payroll_001200_Calculate_Payroll"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable(ds.Tables["ZHRX_CAN_Payroll_001200_Calculate_Payroll"]));
                }
                if ((ds.Tables["ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable(ds.Tables["ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding"]));
                }
                if ((ds.Tables["ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable(ds.Tables["ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary"]));
                }
                if ((ds.Tables["ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable(ds.Tables["ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes"]));
                }
                if ((ds.Tables["ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable(ds.Tables["ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Phase2TestSuiteDataTable Phase2TestSuite {
            get {
                return this.tablePhase2TestSuite;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SmokeTestSuiteDataTable SmokeTestSuite {
            get {
                return this.tableSmokeTestSuite;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen {
            get {
                return this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English {
            get {
                return this.tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French {
            get {
                return this.tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen {
            get {
                return this.tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen {
            get {
                return this.tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction {
            get {
                return this.tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess {
            get {
                return this.tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments {
            get {
                return this.tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import {
            get {
                return this.tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports {
            get {
                return this.tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy {
            get {
                return this.tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement {
            get {
                return this.tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor {
            get {
                return this.tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group {
            get {
                return this.tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level {
            get {
                return this.tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template {
            get {
                return this.tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode {
            get {
                return this.tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance {
            get {
                return this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable ZHRX_CAN_HR_UI_001900_Admin_Code_System {
            get {
                return this.tableZHRX_CAN_HR_UI_001900_Admin_Code_System;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor {
            get {
                return this.tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable ZHRX_CAN_HR_UI_002100_Admin_Language_Editor {
            get {
                return this.tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable ZHRX_CAN_HR_UI_002200_Admin_Export_FTP {
            get {
                return this.tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config {
            get {
                return this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable ZHRX_CAN_HR_UI_002400_Admin_Security {
            get {
                return this.tableZHRX_CAN_HR_UI_002400_Admin_Security;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_HR_UI_002500_HelpDataTable ZHRX_CAN_HR_UI_002500_Help {
            get {
                return this.tableZHRX_CAN_HR_UI_002500_Help;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee {
            get {
                return this.tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record {
            get {
                return this.tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record {
            get {
                return this.tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group {
            get {
                return this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable ZHRX_CAN_Payroll_001200_Calculate_Payroll {
            get {
                return this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding {
            get {
                return this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary {
            get {
                return this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes {
            get {
                return this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period {
            get {
                return this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            testautomationioDataSet cln = ((testautomationioDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Phase2TestSuite"] != null)) {
                    base.Tables.Add(new Phase2TestSuiteDataTable(ds.Tables["Phase2TestSuite"]));
                }
                if ((ds.Tables["SmokeTestSuite"] != null)) {
                    base.Tables.Add(new SmokeTestSuiteDataTable(ds.Tables["SmokeTestSuite"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable(ds.Tables["ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable(ds.Tables["ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable(ds.Tables["ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable(ds.Tables["ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable(ds.Tables["ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable(ds.Tables["ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable(ds.Tables["ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable(ds.Tables["ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable(ds.Tables["ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable(ds.Tables["ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable(ds.Tables["ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable(ds.Tables["ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable(ds.Tables["ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable(ds.Tables["ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable(ds.Tables["ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable(ds.Tables["ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable(ds.Tables["ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable(ds.Tables["ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_001900_Admin_Code_System"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable(ds.Tables["ZHRX_CAN_HR_UI_001900_Admin_Code_System"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable(ds.Tables["ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_002100_Admin_Language_Editor"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable(ds.Tables["ZHRX_CAN_HR_UI_002100_Admin_Language_Editor"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_002200_Admin_Export_FTP"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable(ds.Tables["ZHRX_CAN_HR_UI_002200_Admin_Export_FTP"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable(ds.Tables["ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_002400_Admin_Security"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable(ds.Tables["ZHRX_CAN_HR_UI_002400_Admin_Security"]));
                }
                if ((ds.Tables["ZHRX_CAN_HR_UI_002500_Help"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_HR_UI_002500_HelpDataTable(ds.Tables["ZHRX_CAN_HR_UI_002500_Help"]));
                }
                if ((ds.Tables["ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable(ds.Tables["ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee"]));
                }
                if ((ds.Tables["ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable(ds.Tables["ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record"]));
                }
                if ((ds.Tables["ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable(ds.Tables["ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record"]));
                }
                if ((ds.Tables["ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable(ds.Tables["ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group"]));
                }
                if ((ds.Tables["ZHRX_CAN_Payroll_001200_Calculate_Payroll"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable(ds.Tables["ZHRX_CAN_Payroll_001200_Calculate_Payroll"]));
                }
                if ((ds.Tables["ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable(ds.Tables["ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding"]));
                }
                if ((ds.Tables["ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable(ds.Tables["ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary"]));
                }
                if ((ds.Tables["ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable(ds.Tables["ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes"]));
                }
                if ((ds.Tables["ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period"] != null)) {
                    base.Tables.Add(new ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable(ds.Tables["ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tablePhase2TestSuite = ((Phase2TestSuiteDataTable)(base.Tables["Phase2TestSuite"]));
            if ((initTable == true)) {
                if ((this.tablePhase2TestSuite != null)) {
                    this.tablePhase2TestSuite.InitVars();
                }
            }
            this.tableSmokeTestSuite = ((SmokeTestSuiteDataTable)(base.Tables["SmokeTestSuite"]));
            if ((initTable == true)) {
                if ((this.tableSmokeTestSuite != null)) {
                    this.tableSmokeTestSuite.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen = ((ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable)(base.Tables["ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen != null)) {
                    this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English = ((ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable)(base.Tables["ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English != null)) {
                    this.tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French = ((ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable)(base.Tables["ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French != null)) {
                    this.tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen = ((ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable)(base.Tables["ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen != null)) {
                    this.tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen = ((ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable)(base.Tables["ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen != null)) {
                    this.tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction = ((ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable)(base.Tables["ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction != null)) {
                    this.tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess = ((ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable)(base.Tables["ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess != null)) {
                    this.tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments = ((ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable)(base.Tables["ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments != null)) {
                    this.tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import = ((ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable)(base.Tables["ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import != null)) {
                    this.tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports = ((ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable)(base.Tables["ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports != null)) {
                    this.tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy = ((ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable)(base.Tables["ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy != null)) {
                    this.tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement = ((ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable)(base.Tables["ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement != null)) {
                    this.tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor = ((ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable)(base.Tables["ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor != null)) {
                    this.tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group = ((ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable)(base.Tables["ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group != null)) {
                    this.tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level = ((ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable)(base.Tables["ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level != null)) {
                    this.tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template = ((ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable)(base.Tables["ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template != null)) {
                    this.tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode = ((ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable)(base.Tables["ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode != null)) {
                    this.tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance = ((ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable)(base.Tables["ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance != null)) {
                    this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_001900_Admin_Code_System = ((ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable)(base.Tables["ZHRX_CAN_HR_UI_001900_Admin_Code_System"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_001900_Admin_Code_System != null)) {
                    this.tableZHRX_CAN_HR_UI_001900_Admin_Code_System.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor = ((ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable)(base.Tables["ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor != null)) {
                    this.tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor = ((ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable)(base.Tables["ZHRX_CAN_HR_UI_002100_Admin_Language_Editor"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor != null)) {
                    this.tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP = ((ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable)(base.Tables["ZHRX_CAN_HR_UI_002200_Admin_Export_FTP"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP != null)) {
                    this.tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config = ((ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable)(base.Tables["ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config != null)) {
                    this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_002400_Admin_Security = ((ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable)(base.Tables["ZHRX_CAN_HR_UI_002400_Admin_Security"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_002400_Admin_Security != null)) {
                    this.tableZHRX_CAN_HR_UI_002400_Admin_Security.InitVars();
                }
            }
            this.tableZHRX_CAN_HR_UI_002500_Help = ((ZHRX_CAN_HR_UI_002500_HelpDataTable)(base.Tables["ZHRX_CAN_HR_UI_002500_Help"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_HR_UI_002500_Help != null)) {
                    this.tableZHRX_CAN_HR_UI_002500_Help.InitVars();
                }
            }
            this.tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee = ((ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable)(base.Tables["ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee != null)) {
                    this.tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee.InitVars();
                }
            }
            this.tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record = ((ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable)(base.Tables["ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record != null)) {
                    this.tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record.InitVars();
                }
            }
            this.tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record = ((ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable)(base.Tables["ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record != null)) {
                    this.tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record.InitVars();
                }
            }
            this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group = ((ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable)(base.Tables["ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group != null)) {
                    this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.InitVars();
                }
            }
            this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll = ((ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable)(base.Tables["ZHRX_CAN_Payroll_001200_Calculate_Payroll"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll != null)) {
                    this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.InitVars();
                }
            }
            this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding = ((ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable)(base.Tables["ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding != null)) {
                    this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.InitVars();
                }
            }
            this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary = ((ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable)(base.Tables["ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary != null)) {
                    this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.InitVars();
                }
            }
            this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes = ((ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable)(base.Tables["ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes != null)) {
                    this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.InitVars();
                }
            }
            this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period = ((ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable)(base.Tables["ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period"]));
            if ((initTable == true)) {
                if ((this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period != null)) {
                    this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitClass() {
            this.DataSetName = "testautomationioDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/testautomationioDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePhase2TestSuite = new Phase2TestSuiteDataTable();
            base.Tables.Add(this.tablePhase2TestSuite);
            this.tableSmokeTestSuite = new SmokeTestSuiteDataTable();
            base.Tables.Add(this.tableSmokeTestSuite);
            this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen = new ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen);
            this.tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English = new ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English);
            this.tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French = new ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French);
            this.tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen = new ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen);
            this.tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen = new ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen);
            this.tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction = new ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction);
            this.tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess = new ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess);
            this.tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments = new ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments);
            this.tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import = new ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import);
            this.tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports = new ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports);
            this.tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy = new ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy);
            this.tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement = new ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement);
            this.tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor = new ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor);
            this.tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group = new ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group);
            this.tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level = new ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level);
            this.tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template = new ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template);
            this.tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode = new ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode);
            this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance = new ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance);
            this.tableZHRX_CAN_HR_UI_001900_Admin_Code_System = new ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_001900_Admin_Code_System);
            this.tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor = new ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor);
            this.tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor = new ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor);
            this.tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP = new ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP);
            this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config = new ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config);
            this.tableZHRX_CAN_HR_UI_002400_Admin_Security = new ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_002400_Admin_Security);
            this.tableZHRX_CAN_HR_UI_002500_Help = new ZHRX_CAN_HR_UI_002500_HelpDataTable();
            base.Tables.Add(this.tableZHRX_CAN_HR_UI_002500_Help);
            this.tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee = new ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable();
            base.Tables.Add(this.tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee);
            this.tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record = new ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable();
            base.Tables.Add(this.tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record);
            this.tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record = new ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable();
            base.Tables.Add(this.tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record);
            this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group = new ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable();
            base.Tables.Add(this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group);
            this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll = new ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable();
            base.Tables.Add(this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll);
            this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding = new ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable();
            base.Tables.Add(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding);
            this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary = new ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable();
            base.Tables.Add(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary);
            this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes = new ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable();
            base.Tables.Add(this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes);
            this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period = new ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable();
            base.Tables.Add(this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializePhase2TestSuite() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeSmokeTestSuite() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_000900_Payroll_Screen_Import() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_001100_Setup_Screen_Policy() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_001900_Admin_Code_System() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_002100_Admin_Language_Editor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_002200_Admin_Export_FTP() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_002400_Admin_Security() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_HR_UI_002500_Help() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_Payroll_001200_Calculate_Payroll() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            testautomationioDataSet ds = new testautomationioDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Phase2TestSuiteRowChangeEventHandler(object sender, Phase2TestSuiteRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void SmokeTestSuiteRowChangeEventHandler(object sender, SmokeTestSuiteRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_HR_UI_002500_HelpRowChangeEventHandler(object sender, ZHRX_CAN_HR_UI_002500_HelpRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChangeEventHandler(object sender, ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChangeEventHandler(object sender, ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChangeEventHandler(object sender, ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChangeEventHandler(object sender, ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChangeEventHandler(object sender, ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChangeEventHandler(object sender, ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChangeEventHandler(object sender, ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChangeEventHandler(object sender, ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChangeEventHandler(object sender, ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Phase2TestSuiteDataTable : global::System.Data.TypedTableBase<Phase2TestSuiteRow> {
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Phase2TestSuiteDataTable() {
                this.TableName = "Phase2TestSuite";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Phase2TestSuiteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Phase2TestSuiteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCategoryColumn {
                get {
                    return this.columnTestCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Phase2TestSuiteRow this[int index] {
                get {
                    return ((Phase2TestSuiteRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Phase2TestSuiteRowChangeEventHandler Phase2TestSuiteRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Phase2TestSuiteRowChangeEventHandler Phase2TestSuiteRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Phase2TestSuiteRowChangeEventHandler Phase2TestSuiteRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Phase2TestSuiteRowChangeEventHandler Phase2TestSuiteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddPhase2TestSuiteRow(Phase2TestSuiteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Phase2TestSuiteRow AddPhase2TestSuiteRow(string TestCaseID, string TestCaseName, string TestCategory) {
                Phase2TestSuiteRow rowPhase2TestSuiteRow = ((Phase2TestSuiteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseID,
                        TestCaseName,
                        TestCategory};
                rowPhase2TestSuiteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPhase2TestSuiteRow);
                return rowPhase2TestSuiteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Phase2TestSuiteDataTable cln = ((Phase2TestSuiteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Phase2TestSuiteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCategory = base.Columns["TestCategory"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCategory = new global::System.Data.DataColumn("TestCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCategory);
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.MaxLength = 20;
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCategory.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Phase2TestSuiteRow NewPhase2TestSuiteRow() {
                return ((Phase2TestSuiteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Phase2TestSuiteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Phase2TestSuiteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Phase2TestSuiteRowChanged != null)) {
                    this.Phase2TestSuiteRowChanged(this, new Phase2TestSuiteRowChangeEvent(((Phase2TestSuiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Phase2TestSuiteRowChanging != null)) {
                    this.Phase2TestSuiteRowChanging(this, new Phase2TestSuiteRowChangeEvent(((Phase2TestSuiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Phase2TestSuiteRowDeleted != null)) {
                    this.Phase2TestSuiteRowDeleted(this, new Phase2TestSuiteRowChangeEvent(((Phase2TestSuiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Phase2TestSuiteRowDeleting != null)) {
                    this.Phase2TestSuiteRowDeleting(this, new Phase2TestSuiteRowChangeEvent(((Phase2TestSuiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemovePhase2TestSuiteRow(Phase2TestSuiteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Phase2TestSuiteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SmokeTestSuiteDataTable : global::System.Data.TypedTableBase<SmokeTestSuiteRow> {
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SmokeTestSuiteDataTable() {
                this.TableName = "SmokeTestSuite";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SmokeTestSuiteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected SmokeTestSuiteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCategoryColumn {
                get {
                    return this.columnTestCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SmokeTestSuiteRow this[int index] {
                get {
                    return ((SmokeTestSuiteRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SmokeTestSuiteRowChangeEventHandler SmokeTestSuiteRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SmokeTestSuiteRowChangeEventHandler SmokeTestSuiteRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SmokeTestSuiteRowChangeEventHandler SmokeTestSuiteRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SmokeTestSuiteRowChangeEventHandler SmokeTestSuiteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddSmokeTestSuiteRow(SmokeTestSuiteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SmokeTestSuiteRow AddSmokeTestSuiteRow(string TestCaseID, string TestCaseName, string TestCategory) {
                SmokeTestSuiteRow rowSmokeTestSuiteRow = ((SmokeTestSuiteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseID,
                        TestCaseName,
                        TestCategory};
                rowSmokeTestSuiteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSmokeTestSuiteRow);
                return rowSmokeTestSuiteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SmokeTestSuiteRow FindByTestCaseID(string TestCaseID) {
                return ((SmokeTestSuiteRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SmokeTestSuiteDataTable cln = ((SmokeTestSuiteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SmokeTestSuiteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCategory = base.Columns["TestCategory"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCategory = new global::System.Data.DataColumn("TestCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCategory);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCategory.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SmokeTestSuiteRow NewSmokeTestSuiteRow() {
                return ((SmokeTestSuiteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SmokeTestSuiteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SmokeTestSuiteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SmokeTestSuiteRowChanged != null)) {
                    this.SmokeTestSuiteRowChanged(this, new SmokeTestSuiteRowChangeEvent(((SmokeTestSuiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SmokeTestSuiteRowChanging != null)) {
                    this.SmokeTestSuiteRowChanging(this, new SmokeTestSuiteRowChangeEvent(((SmokeTestSuiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SmokeTestSuiteRowDeleted != null)) {
                    this.SmokeTestSuiteRowDeleted(this, new SmokeTestSuiteRowChangeEvent(((SmokeTestSuiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SmokeTestSuiteRowDeleting != null)) {
                    this.SmokeTestSuiteRowDeleting(this, new SmokeTestSuiteRowChangeEvent(((SmokeTestSuiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveSmokeTestSuiteRow(SmokeTestSuiteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SmokeTestSuiteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnUser_Language;
            
            private global::System.Data.DataColumn columnUser_Profile;
            
            private global::System.Data.DataColumn columnHR_Screen;
            
            private global::System.Data.DataColumn columnVerify_TextFields;
            
            private global::System.Data.DataColumn columnVerify_Buttons;
            
            private global::System.Data.DataColumn columnVerify_DropDowns;
            
            private global::System.Data.DataColumn columnVerify_CheckBoxes;
            
            private global::System.Data.DataColumn columnVerify_ToolBars;
            
            private global::System.Data.DataColumn columnVerify_TableColumns;
            
            private global::System.Data.DataColumn columnVerify_LabelFields;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_LanguageColumn {
                get {
                    return this.columnUser_Language;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_ProfileColumn {
                get {
                    return this.columnUser_Profile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn HR_ScreenColumn {
                get {
                    return this.columnHR_Screen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Verify_TextFieldsColumn {
                get {
                    return this.columnVerify_TextFields;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Verify_ButtonsColumn {
                get {
                    return this.columnVerify_Buttons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Verify_DropDownsColumn {
                get {
                    return this.columnVerify_DropDowns;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Verify_CheckBoxesColumn {
                get {
                    return this.columnVerify_CheckBoxes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Verify_ToolBarsColumn {
                get {
                    return this.columnVerify_ToolBars;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Verify_TableColumnsColumn {
                get {
                    return this.columnVerify_TableColumns;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Verify_LabelFieldsColumn {
                get {
                    return this.columnVerify_LabelFields;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChangeEventHandler ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChangeEventHandler ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChangeEventHandler ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChangeEventHandler ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow(ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow AddZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow(string TestCaseName, string TestCaseID, string User_Language, string User_Profile, string HR_Screen, string Verify_TextFields, string Verify_Buttons, string Verify_DropDowns, string Verify_CheckBoxes, string Verify_ToolBars, string Verify_TableColumns, string Verify_LabelFields) {
                ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow rowZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow = ((ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID,
                        User_Language,
                        User_Profile,
                        HR_Screen,
                        Verify_TextFields,
                        Verify_Buttons,
                        Verify_DropDowns,
                        Verify_CheckBoxes,
                        Verify_ToolBars,
                        Verify_TableColumns,
                        Verify_LabelFields};
                rowZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow);
                return rowZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable cln = ((ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnUser_Language = base.Columns["User_Language"];
                this.columnUser_Profile = base.Columns["User_Profile"];
                this.columnHR_Screen = base.Columns["HR_Screen"];
                this.columnVerify_TextFields = base.Columns["Verify_TextFields"];
                this.columnVerify_Buttons = base.Columns["Verify_Buttons"];
                this.columnVerify_DropDowns = base.Columns["Verify_DropDowns"];
                this.columnVerify_CheckBoxes = base.Columns["Verify_CheckBoxes"];
                this.columnVerify_ToolBars = base.Columns["Verify_ToolBars"];
                this.columnVerify_TableColumns = base.Columns["Verify_TableColumns"];
                this.columnVerify_LabelFields = base.Columns["Verify_LabelFields"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnUser_Language = new global::System.Data.DataColumn("User_Language", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Language);
                this.columnUser_Profile = new global::System.Data.DataColumn("User_Profile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Profile);
                this.columnHR_Screen = new global::System.Data.DataColumn("HR_Screen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHR_Screen);
                this.columnVerify_TextFields = new global::System.Data.DataColumn("Verify_TextFields", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVerify_TextFields);
                this.columnVerify_Buttons = new global::System.Data.DataColumn("Verify_Buttons", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVerify_Buttons);
                this.columnVerify_DropDowns = new global::System.Data.DataColumn("Verify_DropDowns", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVerify_DropDowns);
                this.columnVerify_CheckBoxes = new global::System.Data.DataColumn("Verify_CheckBoxes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVerify_CheckBoxes);
                this.columnVerify_ToolBars = new global::System.Data.DataColumn("Verify_ToolBars", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVerify_ToolBars);
                this.columnVerify_TableColumns = new global::System.Data.DataColumn("Verify_TableColumns", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVerify_TableColumns);
                this.columnVerify_LabelFields = new global::System.Data.DataColumn("Verify_LabelFields", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVerify_LabelFields);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
                this.columnUser_Language.AllowDBNull = false;
                this.columnUser_Language.MaxLength = 50;
                this.columnUser_Profile.AllowDBNull = false;
                this.columnUser_Profile.MaxLength = 50;
                this.columnHR_Screen.AllowDBNull = false;
                this.columnHR_Screen.MaxLength = 50;
                this.columnVerify_TextFields.MaxLength = 500;
                this.columnVerify_Buttons.MaxLength = 500;
                this.columnVerify_DropDowns.MaxLength = 500;
                this.columnVerify_CheckBoxes.MaxLength = 500;
                this.columnVerify_ToolBars.MaxLength = 500;
                this.columnVerify_TableColumns.MaxLength = 500;
                this.columnVerify_LabelFields.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow NewZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow() {
                return ((ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChanged(this, new ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChangeEvent(((ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChanging(this, new ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChangeEvent(((ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowDeleted(this, new ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChangeEvent(((ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowDeleting(this, new ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChangeEvent(((ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow(ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChangeEventHandler ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChangeEventHandler ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChangeEventHandler ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChangeEventHandler ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow(ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow AddZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow rowZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow = ((ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow);
                return rowZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable cln = ((ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow NewZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow() {
                return ((ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChanged(this, new ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChangeEvent(((ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChanging(this, new ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChangeEvent(((ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowDeleted(this, new ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChangeEvent(((ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowDeleting(this, new ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChangeEvent(((ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow(ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDat" +
                    "aTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChangeEventHandler ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChangeEventHandler ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChangeEventHandler ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChangeEventHandler ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow(ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow AddZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow rowZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow = ((ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow);
                return rowZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable cln = ((ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow NewZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow() {
                return ((ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChanged(this, new ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChangeEvent(((ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChanging(this, new ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChangeEvent(((ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowDeleted(this, new ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChangeEvent(((ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowDeleting(this, new ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChangeEvent(((ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow(ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChangeEventHandler ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChangeEventHandler ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChangeEventHandler ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChangeEventHandler ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow(ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow AddZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow rowZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow = ((ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow);
                return rowZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable cln = ((ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow NewZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow() {
                return ((ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChanged(this, new ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChangeEvent(((ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChanging(this, new ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChangeEvent(((ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowDeleted(this, new ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChangeEvent(((ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowDeleting(this, new ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChangeEvent(((ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow(ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChangeEventHandler ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChangeEventHandler ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChangeEventHandler ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChangeEventHandler ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow(ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow AddZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow rowZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow = ((ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow);
                return rowZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable cln = ((ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow NewZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow() {
                return ((ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChanged(this, new ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChangeEvent(((ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChanging(this, new ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChangeEvent(((ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowDeleted(this, new ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChangeEvent(((ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowDeleting(this, new ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChangeEvent(((ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow(ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChangeEventHandler ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChangeEventHandler ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChangeEventHandler ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChangeEventHandler ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow(ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow AddZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow rowZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow = ((ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow);
                return rowZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable cln = ((ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow NewZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow() {
                return ((ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChanged(this, new ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChangeEvent(((ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChanging(this, new ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChangeEvent(((ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowDeleted(this, new ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChangeEvent(((ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowDeleting(this, new ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChangeEvent(((ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow(ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChangeEventHandler ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChangeEventHandler ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChangeEventHandler ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChangeEventHandler ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow(ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow AddZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow rowZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow = ((ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow);
                return rowZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable cln = ((ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow NewZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow() {
                return ((ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChanged(this, new ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChangeEvent(((ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChanging(this, new ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChangeEvent(((ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowDeleted(this, new ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChangeEvent(((ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowDeleting(this, new ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChangeEvent(((ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow(ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChangeEventHandler ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChangeEventHandler ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChangeEventHandler ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChangeEventHandler ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow(ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow AddZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow rowZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow = ((ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow);
                return rowZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable cln = ((ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow NewZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow() {
                return ((ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChanged(this, new ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChangeEvent(((ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChanging(this, new ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChangeEvent(((ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowDeleted(this, new ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChangeEvent(((ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowDeleting(this, new ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChangeEvent(((ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow(ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChangeEventHandler ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChangeEventHandler ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChangeEventHandler ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChangeEventHandler ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow(ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow AddZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow rowZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow = ((ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow);
                return rowZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable cln = ((ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow NewZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow() {
                return ((ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChanged(this, new ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChangeEvent(((ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChanging(this, new ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChangeEvent(((ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowDeleted(this, new ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChangeEvent(((ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowDeleting(this, new ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChangeEvent(((ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow(ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChangeEventHandler ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChangeEventHandler ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChangeEventHandler ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChangeEventHandler ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow(ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow AddZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow rowZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow = ((ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow);
                return rowZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable cln = ((ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow NewZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow() {
                return ((ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChanged(this, new ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChangeEvent(((ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChanging(this, new ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChangeEvent(((ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowDeleted(this, new ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChangeEvent(((ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowDeleting(this, new ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChangeEvent(((ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow(ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChangeEventHandler ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChangeEventHandler ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChangeEventHandler ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChangeEventHandler ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow(ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow AddZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow rowZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow = ((ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow);
                return rowZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable cln = ((ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow NewZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow() {
                return ((ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChanged(this, new ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChangeEvent(((ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChanging(this, new ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChangeEvent(((ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowDeleted(this, new ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChangeEvent(((ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowDeleting(this, new ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChangeEvent(((ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow(ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChangeEventHandler ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChangeEventHandler ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChangeEventHandler ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChangeEventHandler ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow(ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow AddZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow rowZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow = ((ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow);
                return rowZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable cln = ((ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow NewZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow() {
                return ((ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChanged(this, new ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChangeEvent(((ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChanging(this, new ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChangeEvent(((ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowDeleted(this, new ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChangeEvent(((ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowDeleting(this, new ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChangeEvent(((ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow(ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChangeEventHandler ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChangeEventHandler ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChangeEventHandler ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChangeEventHandler ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow(ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow AddZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow rowZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow = ((ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow);
                return rowZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable cln = ((ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow NewZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow() {
                return ((ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChanged(this, new ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChangeEvent(((ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChanging(this, new ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChangeEvent(((ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowDeleted(this, new ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChangeEvent(((ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowDeleting(this, new ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChangeEvent(((ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow(ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChangeEventHandler ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChangeEventHandler ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChangeEventHandler ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChangeEventHandler ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow(ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow AddZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow rowZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow = ((ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow);
                return rowZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable cln = ((ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow NewZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow() {
                return ((ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChanged(this, new ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChangeEvent(((ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChanging(this, new ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChangeEvent(((ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowDeleted(this, new ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChangeEvent(((ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowDeleting(this, new ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChangeEvent(((ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow(ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChangeEventHandler ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChangeEventHandler ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChangeEventHandler ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChangeEventHandler ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow(ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow AddZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow rowZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow = ((ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow);
                return rowZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable cln = ((ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow NewZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow() {
                return ((ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChanged(this, new ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChangeEvent(((ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChanging(this, new ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChangeEvent(((ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowDeleted(this, new ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChangeEvent(((ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowDeleting(this, new ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChangeEvent(((ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow(ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChangeEventHandler ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChangeEventHandler ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChangeEventHandler ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChangeEventHandler ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow(ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow AddZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow rowZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow = ((ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow);
                return rowZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable cln = ((ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow NewZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow() {
                return ((ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChanged(this, new ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChangeEvent(((ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChanging(this, new ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChangeEvent(((ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowDeleted(this, new ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChangeEvent(((ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowDeleting(this, new ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChangeEvent(((ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow(ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChangeEventHandler ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChangeEventHandler ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChangeEventHandler ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChangeEventHandler ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow(ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow AddZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow rowZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow = ((ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow);
                return rowZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable cln = ((ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow NewZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow() {
                return ((ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChanged(this, new ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChangeEvent(((ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChanging(this, new ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChangeEvent(((ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowDeleted(this, new ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChangeEvent(((ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowDeleting(this, new ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChangeEvent(((ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow(ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnAdmin_Options;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Admin_OptionsColumn {
                get {
                    return this.columnAdmin_Options;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChangeEventHandler ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChangeEventHandler ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChangeEventHandler ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChangeEventHandler ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow(ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow AddZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow(string TestCaseName, string TestCaseID, string Admin_Options) {
                ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow rowZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow = ((ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID,
                        Admin_Options};
                rowZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow);
                return rowZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable cln = ((ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnAdmin_Options = base.Columns["Admin_Options"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnAdmin_Options = new global::System.Data.DataColumn("Admin_Options", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdmin_Options);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
                this.columnAdmin_Options.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow NewZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow() {
                return ((ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChanged(this, new ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChangeEvent(((ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChanging(this, new ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChangeEvent(((ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowDeleted(this, new ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChangeEvent(((ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowDeleting(this, new ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChangeEvent(((ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow(ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_001900_Admin_Code_System";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChangeEventHandler ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChangeEventHandler ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChangeEventHandler ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChangeEventHandler ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow(ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow AddZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow rowZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow = ((ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow);
                return rowZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable cln = ((ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow NewZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow() {
                return ((ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChanged(this, new ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChangeEvent(((ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChanging(this, new ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChangeEvent(((ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowDeleted(this, new ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChangeEvent(((ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowDeleting(this, new ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChangeEvent(((ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow(ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChangeEventHandler ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChangeEventHandler ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChangeEventHandler ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChangeEventHandler ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow(ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow AddZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow rowZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow = ((ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow);
                return rowZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable cln = ((ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow NewZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow() {
                return ((ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChanged(this, new ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChangeEvent(((ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChanging(this, new ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChangeEvent(((ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowDeleted(this, new ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChangeEvent(((ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowDeleting(this, new ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChangeEvent(((ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow(ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_002100_Admin_Language_Editor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChangeEventHandler ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChangeEventHandler ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChangeEventHandler ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChangeEventHandler ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow(ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow AddZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow rowZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow = ((ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow);
                return rowZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable cln = ((ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow NewZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow() {
                return ((ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChanged(this, new ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChangeEvent(((ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChanging(this, new ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChangeEvent(((ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowDeleted(this, new ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChangeEvent(((ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowDeleting(this, new ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChangeEvent(((ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow(ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_002200_Admin_Export_FTP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChangeEventHandler ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChangeEventHandler ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChangeEventHandler ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChangeEventHandler ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow(ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow AddZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow rowZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow = ((ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow);
                return rowZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable cln = ((ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow NewZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow() {
                return ((ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChanged(this, new ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChangeEvent(((ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChanging(this, new ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChangeEvent(((ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowDeleted(this, new ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChangeEvent(((ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowDeleting(this, new ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChangeEvent(((ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow(ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnAdmin_Options;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Admin_OptionsColumn {
                get {
                    return this.columnAdmin_Options;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChangeEventHandler ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChangeEventHandler ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChangeEventHandler ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChangeEventHandler ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow(ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow AddZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow(string TestCaseName, string TestCaseID, string Admin_Options) {
                ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow rowZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow = ((ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID,
                        Admin_Options};
                rowZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow);
                return rowZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable cln = ((ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnAdmin_Options = base.Columns["Admin_Options"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnAdmin_Options = new global::System.Data.DataColumn("Admin_Options", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdmin_Options);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
                this.columnAdmin_Options.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow NewZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow() {
                return ((ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChanged(this, new ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChangeEvent(((ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChanging(this, new ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChangeEvent(((ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowDeleted(this, new ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChangeEvent(((ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowDeleting(this, new ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChangeEvent(((ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow(ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_002400_Admin_SecurityRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnAdmin_Options;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_002400_Admin_Security";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Admin_OptionsColumn {
                get {
                    return this.columnAdmin_Options;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002400_Admin_SecurityRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_002400_Admin_SecurityRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChangeEventHandler ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChangeEventHandler ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChangeEventHandler ZHRX_CAN_HR_UI_002400_Admin_SecurityRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChangeEventHandler ZHRX_CAN_HR_UI_002400_Admin_SecurityRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_002400_Admin_SecurityRow(ZHRX_CAN_HR_UI_002400_Admin_SecurityRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002400_Admin_SecurityRow AddZHRX_CAN_HR_UI_002400_Admin_SecurityRow(string TestCaseName, string TestCaseID, string Admin_Options) {
                ZHRX_CAN_HR_UI_002400_Admin_SecurityRow rowZHRX_CAN_HR_UI_002400_Admin_SecurityRow = ((ZHRX_CAN_HR_UI_002400_Admin_SecurityRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID,
                        Admin_Options};
                rowZHRX_CAN_HR_UI_002400_Admin_SecurityRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_002400_Admin_SecurityRow);
                return rowZHRX_CAN_HR_UI_002400_Admin_SecurityRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002400_Admin_SecurityRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_002400_Admin_SecurityRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable cln = ((ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnAdmin_Options = base.Columns["Admin_Options"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnAdmin_Options = new global::System.Data.DataColumn("Admin_Options", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdmin_Options);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
                this.columnAdmin_Options.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002400_Admin_SecurityRow NewZHRX_CAN_HR_UI_002400_Admin_SecurityRow() {
                return ((ZHRX_CAN_HR_UI_002400_Admin_SecurityRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_002400_Admin_SecurityRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_002400_Admin_SecurityRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChanged(this, new ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChangeEvent(((ZHRX_CAN_HR_UI_002400_Admin_SecurityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChanging(this, new ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChangeEvent(((ZHRX_CAN_HR_UI_002400_Admin_SecurityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_002400_Admin_SecurityRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_002400_Admin_SecurityRowDeleted(this, new ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChangeEvent(((ZHRX_CAN_HR_UI_002400_Admin_SecurityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_002400_Admin_SecurityRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_002400_Admin_SecurityRowDeleting(this, new ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChangeEvent(((ZHRX_CAN_HR_UI_002400_Admin_SecurityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_002400_Admin_SecurityRow(ZHRX_CAN_HR_UI_002400_Admin_SecurityRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_HR_UI_002500_HelpDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_HR_UI_002500_HelpRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnHelp_Options;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002500_HelpDataTable() {
                this.TableName = "ZHRX_CAN_HR_UI_002500_Help";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_002500_HelpDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_HR_UI_002500_HelpDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Help_OptionsColumn {
                get {
                    return this.columnHelp_Options;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002500_HelpRow this[int index] {
                get {
                    return ((ZHRX_CAN_HR_UI_002500_HelpRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002500_HelpRowChangeEventHandler ZHRX_CAN_HR_UI_002500_HelpRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002500_HelpRowChangeEventHandler ZHRX_CAN_HR_UI_002500_HelpRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002500_HelpRowChangeEventHandler ZHRX_CAN_HR_UI_002500_HelpRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_HR_UI_002500_HelpRowChangeEventHandler ZHRX_CAN_HR_UI_002500_HelpRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_HR_UI_002500_HelpRow(ZHRX_CAN_HR_UI_002500_HelpRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002500_HelpRow AddZHRX_CAN_HR_UI_002500_HelpRow(string TestCaseName, string TestCaseID, string Help_Options) {
                ZHRX_CAN_HR_UI_002500_HelpRow rowZHRX_CAN_HR_UI_002500_HelpRow = ((ZHRX_CAN_HR_UI_002500_HelpRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID,
                        Help_Options};
                rowZHRX_CAN_HR_UI_002500_HelpRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_HR_UI_002500_HelpRow);
                return rowZHRX_CAN_HR_UI_002500_HelpRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002500_HelpRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_HR_UI_002500_HelpRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_HR_UI_002500_HelpDataTable cln = ((ZHRX_CAN_HR_UI_002500_HelpDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_HR_UI_002500_HelpDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnHelp_Options = base.Columns["Help_Options"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnHelp_Options = new global::System.Data.DataColumn("Help_Options", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHelp_Options);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
                this.columnHelp_Options.MaxLength = 300;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002500_HelpRow NewZHRX_CAN_HR_UI_002500_HelpRow() {
                return ((ZHRX_CAN_HR_UI_002500_HelpRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_HR_UI_002500_HelpRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_HR_UI_002500_HelpRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_HR_UI_002500_HelpRowChanged != null)) {
                    this.ZHRX_CAN_HR_UI_002500_HelpRowChanged(this, new ZHRX_CAN_HR_UI_002500_HelpRowChangeEvent(((ZHRX_CAN_HR_UI_002500_HelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_HR_UI_002500_HelpRowChanging != null)) {
                    this.ZHRX_CAN_HR_UI_002500_HelpRowChanging(this, new ZHRX_CAN_HR_UI_002500_HelpRowChangeEvent(((ZHRX_CAN_HR_UI_002500_HelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_HR_UI_002500_HelpRowDeleted != null)) {
                    this.ZHRX_CAN_HR_UI_002500_HelpRowDeleted(this, new ZHRX_CAN_HR_UI_002500_HelpRowChangeEvent(((ZHRX_CAN_HR_UI_002500_HelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_HR_UI_002500_HelpRowDeleting != null)) {
                    this.ZHRX_CAN_HR_UI_002500_HelpRowDeleting(this, new ZHRX_CAN_HR_UI_002500_HelpRowChangeEvent(((ZHRX_CAN_HR_UI_002500_HelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_HR_UI_002500_HelpRow(ZHRX_CAN_HR_UI_002500_HelpRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_HR_UI_002500_HelpDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable() {
                this.TableName = "ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow this[int index] {
                get {
                    return ((ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChangeEventHandler ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChangeEventHandler ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChangeEventHandler ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChangeEventHandler ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow(ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow AddZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow rowZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow = ((ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow);
                return rowZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable cln = ((ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow NewZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow() {
                return ((ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChanged != null)) {
                    this.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChanged(this, new ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChangeEvent(((ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChanging != null)) {
                    this.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChanging(this, new ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChangeEvent(((ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowDeleted != null)) {
                    this.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowDeleted(this, new ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChangeEvent(((ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowDeleting != null)) {
                    this.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowDeleting(this, new ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChangeEvent(((ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow(ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable() {
                this.TableName = "ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow this[int index] {
                get {
                    return ((ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChangeEventHandler ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChangeEventHandler ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChangeEventHandler ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChangeEventHandler ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow(ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow AddZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow rowZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow = ((ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow);
                return rowZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable cln = ((ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow NewZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow() {
                return ((ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChanged != null)) {
                    this.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChanged(this, new ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChangeEvent(((ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChanging != null)) {
                    this.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChanging(this, new ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChangeEvent(((ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowDeleted != null)) {
                    this.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowDeleted(this, new ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChangeEvent(((ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowDeleting != null)) {
                    this.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowDeleting(this, new ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChangeEvent(((ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow(ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable() {
                this.TableName = "ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow this[int index] {
                get {
                    return ((ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChangeEventHandler ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChangeEventHandler ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChangeEventHandler ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChangeEventHandler ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow(ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow AddZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow(string TestCaseName, string TestCaseID) {
                ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow rowZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow = ((ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID};
                rowZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow);
                return rowZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow FindByTestCaseID(string TestCaseID) {
                return ((ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow)(this.Rows.Find(new object[] {
                            TestCaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable cln = ((ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestCaseID}, true));
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 200;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.Unique = true;
                this.columnTestCaseID.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow NewZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow() {
                return ((ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChanged != null)) {
                    this.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChanged(this, new ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChangeEvent(((ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChanging != null)) {
                    this.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChanging(this, new ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChangeEvent(((ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowDeleted != null)) {
                    this.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowDeleted(this, new ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChangeEvent(((ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowDeleting != null)) {
                    this.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowDeleting(this, new ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChangeEvent(((ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow(ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnUser_Language;
            
            private global::System.Data.DataColumn columnUser_Profile;
            
            private global::System.Data.DataColumn columnSetup_Screen;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnPay_Frequency;
            
            private global::System.Data.DataColumn columnProcess_Group;
            
            private global::System.Data.DataColumn columnEnglish_Desc;
            
            private global::System.Data.DataColumn columnFrench_Desc;
            
            private global::System.Data.DataColumn columnPeriod;
            
            private global::System.Data.DataColumn columnStart_Date;
            
            private global::System.Data.DataColumn columnCutoff_Date;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable() {
                this.TableName = "ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_LanguageColumn {
                get {
                    return this.columnUser_Language;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_ProfileColumn {
                get {
                    return this.columnUser_Profile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Setup_ScreenColumn {
                get {
                    return this.columnSetup_Screen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Pay_FrequencyColumn {
                get {
                    return this.columnPay_Frequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Process_GroupColumn {
                get {
                    return this.columnProcess_Group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn English_DescColumn {
                get {
                    return this.columnEnglish_Desc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn French_DescColumn {
                get {
                    return this.columnFrench_Desc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PeriodColumn {
                get {
                    return this.columnPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Start_DateColumn {
                get {
                    return this.columnStart_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Cutoff_DateColumn {
                get {
                    return this.columnCutoff_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow this[int index] {
                get {
                    return ((ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChangeEventHandler ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChangeEventHandler ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChangeEventHandler ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChangeEventHandler ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow(ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow AddZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow(string TestCaseName, string TestCaseID, string User_Language, string User_Profile, string Setup_Screen, string Country, string Pay_Frequency, string Process_Group, string English_Desc, string French_Desc, string Period, string Start_Date, string Cutoff_Date) {
                ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow rowZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow = ((ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID,
                        User_Language,
                        User_Profile,
                        Setup_Screen,
                        Country,
                        Pay_Frequency,
                        Process_Group,
                        English_Desc,
                        French_Desc,
                        Period,
                        Start_Date,
                        Cutoff_Date};
                rowZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow);
                return rowZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable cln = ((ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnUser_Language = base.Columns["User_Language"];
                this.columnUser_Profile = base.Columns["User_Profile"];
                this.columnSetup_Screen = base.Columns["Setup_Screen"];
                this.columnCountry = base.Columns["Country"];
                this.columnPay_Frequency = base.Columns["Pay_Frequency"];
                this.columnProcess_Group = base.Columns["Process_Group"];
                this.columnEnglish_Desc = base.Columns["English_Desc"];
                this.columnFrench_Desc = base.Columns["French_Desc"];
                this.columnPeriod = base.Columns["Period"];
                this.columnStart_Date = base.Columns["Start_Date"];
                this.columnCutoff_Date = base.Columns["Cutoff_Date"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnUser_Language = new global::System.Data.DataColumn("User_Language", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Language);
                this.columnUser_Profile = new global::System.Data.DataColumn("User_Profile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Profile);
                this.columnSetup_Screen = new global::System.Data.DataColumn("Setup_Screen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetup_Screen);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnPay_Frequency = new global::System.Data.DataColumn("Pay_Frequency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPay_Frequency);
                this.columnProcess_Group = new global::System.Data.DataColumn("Process_Group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcess_Group);
                this.columnEnglish_Desc = new global::System.Data.DataColumn("English_Desc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnglish_Desc);
                this.columnFrench_Desc = new global::System.Data.DataColumn("French_Desc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrench_Desc);
                this.columnPeriod = new global::System.Data.DataColumn("Period", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriod);
                this.columnStart_Date = new global::System.Data.DataColumn("Start_Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStart_Date);
                this.columnCutoff_Date = new global::System.Data.DataColumn("Cutoff_Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCutoff_Date);
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 500;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.MaxLength = 20;
                this.columnUser_Language.MaxLength = 50;
                this.columnUser_Profile.MaxLength = 50;
                this.columnSetup_Screen.MaxLength = 50;
                this.columnCountry.MaxLength = 50;
                this.columnPay_Frequency.MaxLength = 50;
                this.columnProcess_Group.MaxLength = 50;
                this.columnEnglish_Desc.MaxLength = 100;
                this.columnFrench_Desc.MaxLength = 100;
                this.columnPeriod.MaxLength = 50;
                this.columnStart_Date.MaxLength = 50;
                this.columnCutoff_Date.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow NewZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow() {
                return ((ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChanged != null)) {
                    this.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChanged(this, new ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChangeEvent(((ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChanging != null)) {
                    this.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChanging(this, new ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChangeEvent(((ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowDeleted != null)) {
                    this.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowDeleted(this, new ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChangeEvent(((ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowDeleting != null)) {
                    this.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowDeleting(this, new ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChangeEvent(((ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow(ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_Payroll_001200_Calculate_PayrollRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnPayroll_Screen;
            
            private global::System.Data.DataColumn columnUser_Language;
            
            private global::System.Data.DataColumn columnUser_Profile;
            
            private global::System.Data.DataColumn columnProcess_Group;
            
            private global::System.Data.DataColumn columnRun_Type;
            
            private global::System.Data.DataColumn columnCheque_Date;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable() {
                this.TableName = "ZHRX_CAN_Payroll_001200_Calculate_Payroll";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Payroll_ScreenColumn {
                get {
                    return this.columnPayroll_Screen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_LanguageColumn {
                get {
                    return this.columnUser_Language;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_ProfileColumn {
                get {
                    return this.columnUser_Profile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Process_GroupColumn {
                get {
                    return this.columnProcess_Group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Run_TypeColumn {
                get {
                    return this.columnRun_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Cheque_DateColumn {
                get {
                    return this.columnCheque_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001200_Calculate_PayrollRow this[int index] {
                get {
                    return ((ZHRX_CAN_Payroll_001200_Calculate_PayrollRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChangeEventHandler ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChangeEventHandler ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChangeEventHandler ZHRX_CAN_Payroll_001200_Calculate_PayrollRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChangeEventHandler ZHRX_CAN_Payroll_001200_Calculate_PayrollRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_Payroll_001200_Calculate_PayrollRow(ZHRX_CAN_Payroll_001200_Calculate_PayrollRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001200_Calculate_PayrollRow AddZHRX_CAN_Payroll_001200_Calculate_PayrollRow(string TestCaseName, string TestCaseID, string Payroll_Screen, string User_Language, string User_Profile, string Process_Group, string Run_Type, string Cheque_Date) {
                ZHRX_CAN_Payroll_001200_Calculate_PayrollRow rowZHRX_CAN_Payroll_001200_Calculate_PayrollRow = ((ZHRX_CAN_Payroll_001200_Calculate_PayrollRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID,
                        Payroll_Screen,
                        User_Language,
                        User_Profile,
                        Process_Group,
                        Run_Type,
                        Cheque_Date};
                rowZHRX_CAN_Payroll_001200_Calculate_PayrollRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_Payroll_001200_Calculate_PayrollRow);
                return rowZHRX_CAN_Payroll_001200_Calculate_PayrollRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable cln = ((ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnPayroll_Screen = base.Columns["Payroll_Screen"];
                this.columnUser_Language = base.Columns["User_Language"];
                this.columnUser_Profile = base.Columns["User_Profile"];
                this.columnProcess_Group = base.Columns["Process_Group"];
                this.columnRun_Type = base.Columns["Run_Type"];
                this.columnCheque_Date = base.Columns["Cheque_Date"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnPayroll_Screen = new global::System.Data.DataColumn("Payroll_Screen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayroll_Screen);
                this.columnUser_Language = new global::System.Data.DataColumn("User_Language", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Language);
                this.columnUser_Profile = new global::System.Data.DataColumn("User_Profile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Profile);
                this.columnProcess_Group = new global::System.Data.DataColumn("Process_Group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcess_Group);
                this.columnRun_Type = new global::System.Data.DataColumn("Run_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRun_Type);
                this.columnCheque_Date = new global::System.Data.DataColumn("Cheque_Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheque_Date);
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 500;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.MaxLength = 20;
                this.columnPayroll_Screen.AllowDBNull = false;
                this.columnPayroll_Screen.MaxLength = 50;
                this.columnUser_Language.MaxLength = 50;
                this.columnUser_Profile.MaxLength = 50;
                this.columnProcess_Group.MaxLength = 50;
                this.columnRun_Type.MaxLength = 50;
                this.columnCheque_Date.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001200_Calculate_PayrollRow NewZHRX_CAN_Payroll_001200_Calculate_PayrollRow() {
                return ((ZHRX_CAN_Payroll_001200_Calculate_PayrollRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_Payroll_001200_Calculate_PayrollRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_Payroll_001200_Calculate_PayrollRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChanged != null)) {
                    this.ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChanged(this, new ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChangeEvent(((ZHRX_CAN_Payroll_001200_Calculate_PayrollRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChanging != null)) {
                    this.ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChanging(this, new ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChangeEvent(((ZHRX_CAN_Payroll_001200_Calculate_PayrollRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_Payroll_001200_Calculate_PayrollRowDeleted != null)) {
                    this.ZHRX_CAN_Payroll_001200_Calculate_PayrollRowDeleted(this, new ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChangeEvent(((ZHRX_CAN_Payroll_001200_Calculate_PayrollRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_Payroll_001200_Calculate_PayrollRowDeleting != null)) {
                    this.ZHRX_CAN_Payroll_001200_Calculate_PayrollRowDeleting(this, new ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChangeEvent(((ZHRX_CAN_Payroll_001200_Calculate_PayrollRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_Payroll_001200_Calculate_PayrollRow(ZHRX_CAN_Payroll_001200_Calculate_PayrollRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnUser_Language;
            
            private global::System.Data.DataColumn columnUser_Profile;
            
            private global::System.Data.DataColumn columnPayroll_Screen;
            
            private global::System.Data.DataColumn columnReport_Type;
            
            private global::System.Data.DataColumn columnReport_Name;
            
            private global::System.Data.DataColumn columnReport_Format;
            
            private global::System.Data.DataColumn columnReportHeader_SP;
            
            private global::System.Data.DataColumn columnSP_Params;
            
            private global::System.Data.DataColumn columnReportHeader_Val;
            
            private global::System.Data.DataColumn columnReportSection_SP;
            
            private global::System.Data.DataColumn columnGet_ColumnNames;
            
            private global::System.Data.DataColumn columnReportTotal_SP;
            
            private global::System.Data.DataColumn columnProcess_Group;
            
            private global::System.Data.DataColumn columnRun_Type;
            
            private global::System.Data.DataColumn columnCheque_Date;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable() {
                this.TableName = "ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_LanguageColumn {
                get {
                    return this.columnUser_Language;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_ProfileColumn {
                get {
                    return this.columnUser_Profile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Payroll_ScreenColumn {
                get {
                    return this.columnPayroll_Screen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Report_TypeColumn {
                get {
                    return this.columnReport_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Report_NameColumn {
                get {
                    return this.columnReport_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Report_FormatColumn {
                get {
                    return this.columnReport_Format;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ReportHeader_SPColumn {
                get {
                    return this.columnReportHeader_SP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SP_ParamsColumn {
                get {
                    return this.columnSP_Params;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ReportHeader_ValColumn {
                get {
                    return this.columnReportHeader_Val;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ReportSection_SPColumn {
                get {
                    return this.columnReportSection_SP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Get_ColumnNamesColumn {
                get {
                    return this.columnGet_ColumnNames;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ReportTotal_SPColumn {
                get {
                    return this.columnReportTotal_SP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Process_GroupColumn {
                get {
                    return this.columnProcess_Group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Run_TypeColumn {
                get {
                    return this.columnRun_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Cheque_DateColumn {
                get {
                    return this.columnCheque_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow this[int index] {
                get {
                    return ((ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChangeEventHandler ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChangeEventHandler ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChangeEventHandler ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChangeEventHandler ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow(ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow AddZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow(
                        string TestCaseName, 
                        string TestCaseID, 
                        string User_Language, 
                        string User_Profile, 
                        string Payroll_Screen, 
                        string Report_Type, 
                        string Report_Name, 
                        string Report_Format, 
                        string ReportHeader_SP, 
                        string SP_Params, 
                        string ReportHeader_Val, 
                        string ReportSection_SP, 
                        string Get_ColumnNames, 
                        string ReportTotal_SP, 
                        string Process_Group, 
                        string Run_Type, 
                        string Cheque_Date) {
                ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow rowZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow = ((ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID,
                        User_Language,
                        User_Profile,
                        Payroll_Screen,
                        Report_Type,
                        Report_Name,
                        Report_Format,
                        ReportHeader_SP,
                        SP_Params,
                        ReportHeader_Val,
                        ReportSection_SP,
                        Get_ColumnNames,
                        ReportTotal_SP,
                        Process_Group,
                        Run_Type,
                        Cheque_Date};
                rowZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow);
                return rowZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable cln = ((ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnUser_Language = base.Columns["User_Language"];
                this.columnUser_Profile = base.Columns["User_Profile"];
                this.columnPayroll_Screen = base.Columns["Payroll_Screen"];
                this.columnReport_Type = base.Columns["Report_Type"];
                this.columnReport_Name = base.Columns["Report_Name"];
                this.columnReport_Format = base.Columns["Report_Format"];
                this.columnReportHeader_SP = base.Columns["ReportHeader_SP"];
                this.columnSP_Params = base.Columns["SP_Params"];
                this.columnReportHeader_Val = base.Columns["ReportHeader_Val"];
                this.columnReportSection_SP = base.Columns["ReportSection_SP"];
                this.columnGet_ColumnNames = base.Columns["Get_ColumnNames"];
                this.columnReportTotal_SP = base.Columns["ReportTotal_SP"];
                this.columnProcess_Group = base.Columns["Process_Group"];
                this.columnRun_Type = base.Columns["Run_Type"];
                this.columnCheque_Date = base.Columns["Cheque_Date"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnUser_Language = new global::System.Data.DataColumn("User_Language", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Language);
                this.columnUser_Profile = new global::System.Data.DataColumn("User_Profile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Profile);
                this.columnPayroll_Screen = new global::System.Data.DataColumn("Payroll_Screen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayroll_Screen);
                this.columnReport_Type = new global::System.Data.DataColumn("Report_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport_Type);
                this.columnReport_Name = new global::System.Data.DataColumn("Report_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport_Name);
                this.columnReport_Format = new global::System.Data.DataColumn("Report_Format", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport_Format);
                this.columnReportHeader_SP = new global::System.Data.DataColumn("ReportHeader_SP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportHeader_SP);
                this.columnSP_Params = new global::System.Data.DataColumn("SP_Params", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSP_Params);
                this.columnReportHeader_Val = new global::System.Data.DataColumn("ReportHeader_Val", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportHeader_Val);
                this.columnReportSection_SP = new global::System.Data.DataColumn("ReportSection_SP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportSection_SP);
                this.columnGet_ColumnNames = new global::System.Data.DataColumn("Get_ColumnNames", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGet_ColumnNames);
                this.columnReportTotal_SP = new global::System.Data.DataColumn("ReportTotal_SP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportTotal_SP);
                this.columnProcess_Group = new global::System.Data.DataColumn("Process_Group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcess_Group);
                this.columnRun_Type = new global::System.Data.DataColumn("Run_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRun_Type);
                this.columnCheque_Date = new global::System.Data.DataColumn("Cheque_Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheque_Date);
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 500;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.MaxLength = 50;
                this.columnUser_Language.MaxLength = 50;
                this.columnUser_Profile.MaxLength = 50;
                this.columnPayroll_Screen.AllowDBNull = false;
                this.columnPayroll_Screen.MaxLength = 200;
                this.columnReport_Type.MaxLength = 50;
                this.columnReport_Name.MaxLength = 200;
                this.columnReport_Format.MaxLength = 10;
                this.columnReportHeader_SP.MaxLength = 100;
                this.columnSP_Params.MaxLength = 200;
                this.columnReportHeader_Val.MaxLength = 500;
                this.columnReportSection_SP.MaxLength = 500;
                this.columnGet_ColumnNames.MaxLength = 500;
                this.columnReportTotal_SP.MaxLength = 100;
                this.columnProcess_Group.MaxLength = 200;
                this.columnRun_Type.MaxLength = 50;
                this.columnCheque_Date.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow NewZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow() {
                return ((ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChanged != null)) {
                    this.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChanged(this, new ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChangeEvent(((ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChanging != null)) {
                    this.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChanging(this, new ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChangeEvent(((ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowDeleted != null)) {
                    this.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowDeleted(this, new ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChangeEvent(((ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowDeleting != null)) {
                    this.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowDeleting(this, new ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChangeEvent(((ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow(ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnUser_Language;
            
            private global::System.Data.DataColumn columnUser_Profile;
            
            private global::System.Data.DataColumn columnPayroll_Screen;
            
            private global::System.Data.DataColumn columnReport_Type;
            
            private global::System.Data.DataColumn columnReport_Name;
            
            private global::System.Data.DataColumn columnReport_Format;
            
            private global::System.Data.DataColumn columnReportHeader_SP;
            
            private global::System.Data.DataColumn columnSP_Params;
            
            private global::System.Data.DataColumn columnReportHeader_Val;
            
            private global::System.Data.DataColumn columnReportSection_SP;
            
            private global::System.Data.DataColumn columnGet_ColumnNames;
            
            private global::System.Data.DataColumn columnReportTotal_SP;
            
            private global::System.Data.DataColumn columnProcess_Group;
            
            private global::System.Data.DataColumn columnRun_Type;
            
            private global::System.Data.DataColumn columnCheque_Date;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable() {
                this.TableName = "ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_LanguageColumn {
                get {
                    return this.columnUser_Language;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_ProfileColumn {
                get {
                    return this.columnUser_Profile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Payroll_ScreenColumn {
                get {
                    return this.columnPayroll_Screen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Report_TypeColumn {
                get {
                    return this.columnReport_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Report_NameColumn {
                get {
                    return this.columnReport_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Report_FormatColumn {
                get {
                    return this.columnReport_Format;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ReportHeader_SPColumn {
                get {
                    return this.columnReportHeader_SP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SP_ParamsColumn {
                get {
                    return this.columnSP_Params;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ReportHeader_ValColumn {
                get {
                    return this.columnReportHeader_Val;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ReportSection_SPColumn {
                get {
                    return this.columnReportSection_SP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Get_ColumnNamesColumn {
                get {
                    return this.columnGet_ColumnNames;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ReportTotal_SPColumn {
                get {
                    return this.columnReportTotal_SP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Process_GroupColumn {
                get {
                    return this.columnProcess_Group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Run_TypeColumn {
                get {
                    return this.columnRun_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Cheque_DateColumn {
                get {
                    return this.columnCheque_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow this[int index] {
                get {
                    return ((ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChangeEventHandler ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChangeEventHandler ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChangeEventHandler ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChangeEventHandler ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow(ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow AddZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow(
                        string TestCaseName, 
                        string TestCaseID, 
                        string User_Language, 
                        string User_Profile, 
                        string Payroll_Screen, 
                        string Report_Type, 
                        string Report_Name, 
                        string Report_Format, 
                        string ReportHeader_SP, 
                        string SP_Params, 
                        string ReportHeader_Val, 
                        string ReportSection_SP, 
                        string Get_ColumnNames, 
                        string ReportTotal_SP, 
                        string Process_Group, 
                        string Run_Type, 
                        string Cheque_Date) {
                ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow rowZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow = ((ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID,
                        User_Language,
                        User_Profile,
                        Payroll_Screen,
                        Report_Type,
                        Report_Name,
                        Report_Format,
                        ReportHeader_SP,
                        SP_Params,
                        ReportHeader_Val,
                        ReportSection_SP,
                        Get_ColumnNames,
                        ReportTotal_SP,
                        Process_Group,
                        Run_Type,
                        Cheque_Date};
                rowZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow);
                return rowZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable cln = ((ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnUser_Language = base.Columns["User_Language"];
                this.columnUser_Profile = base.Columns["User_Profile"];
                this.columnPayroll_Screen = base.Columns["Payroll_Screen"];
                this.columnReport_Type = base.Columns["Report_Type"];
                this.columnReport_Name = base.Columns["Report_Name"];
                this.columnReport_Format = base.Columns["Report_Format"];
                this.columnReportHeader_SP = base.Columns["ReportHeader_SP"];
                this.columnSP_Params = base.Columns["SP_Params"];
                this.columnReportHeader_Val = base.Columns["ReportHeader_Val"];
                this.columnReportSection_SP = base.Columns["ReportSection_SP"];
                this.columnGet_ColumnNames = base.Columns["Get_ColumnNames"];
                this.columnReportTotal_SP = base.Columns["ReportTotal_SP"];
                this.columnProcess_Group = base.Columns["Process_Group"];
                this.columnRun_Type = base.Columns["Run_Type"];
                this.columnCheque_Date = base.Columns["Cheque_Date"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnUser_Language = new global::System.Data.DataColumn("User_Language", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Language);
                this.columnUser_Profile = new global::System.Data.DataColumn("User_Profile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Profile);
                this.columnPayroll_Screen = new global::System.Data.DataColumn("Payroll_Screen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayroll_Screen);
                this.columnReport_Type = new global::System.Data.DataColumn("Report_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport_Type);
                this.columnReport_Name = new global::System.Data.DataColumn("Report_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport_Name);
                this.columnReport_Format = new global::System.Data.DataColumn("Report_Format", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport_Format);
                this.columnReportHeader_SP = new global::System.Data.DataColumn("ReportHeader_SP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportHeader_SP);
                this.columnSP_Params = new global::System.Data.DataColumn("SP_Params", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSP_Params);
                this.columnReportHeader_Val = new global::System.Data.DataColumn("ReportHeader_Val", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportHeader_Val);
                this.columnReportSection_SP = new global::System.Data.DataColumn("ReportSection_SP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportSection_SP);
                this.columnGet_ColumnNames = new global::System.Data.DataColumn("Get_ColumnNames", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGet_ColumnNames);
                this.columnReportTotal_SP = new global::System.Data.DataColumn("ReportTotal_SP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportTotal_SP);
                this.columnProcess_Group = new global::System.Data.DataColumn("Process_Group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcess_Group);
                this.columnRun_Type = new global::System.Data.DataColumn("Run_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRun_Type);
                this.columnCheque_Date = new global::System.Data.DataColumn("Cheque_Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheque_Date);
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 500;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.MaxLength = 50;
                this.columnUser_Language.MaxLength = 50;
                this.columnUser_Profile.MaxLength = 50;
                this.columnPayroll_Screen.AllowDBNull = false;
                this.columnPayroll_Screen.MaxLength = 200;
                this.columnReport_Type.MaxLength = 50;
                this.columnReport_Name.MaxLength = 200;
                this.columnReport_Format.MaxLength = 10;
                this.columnReportHeader_SP.MaxLength = 100;
                this.columnSP_Params.MaxLength = 200;
                this.columnReportHeader_Val.MaxLength = 500;
                this.columnReportSection_SP.MaxLength = 500;
                this.columnGet_ColumnNames.MaxLength = 500;
                this.columnReportTotal_SP.MaxLength = 100;
                this.columnProcess_Group.MaxLength = 200;
                this.columnRun_Type.MaxLength = 50;
                this.columnCheque_Date.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow NewZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow() {
                return ((ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChanged != null)) {
                    this.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChanged(this, new ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChangeEvent(((ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChanging != null)) {
                    this.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChanging(this, new ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChangeEvent(((ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowDeleted != null)) {
                    this.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowDeleted(this, new ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChangeEvent(((ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowDeleting != null)) {
                    this.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowDeleting(this, new ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChangeEvent(((ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow(ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryD" +
                    "ataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnUser_Language;
            
            private global::System.Data.DataColumn columnUser_Profile;
            
            private global::System.Data.DataColumn columnPayroll_Screen;
            
            private global::System.Data.DataColumn columnReport_Type;
            
            private global::System.Data.DataColumn columnReport_Name;
            
            private global::System.Data.DataColumn columnReport_Format;
            
            private global::System.Data.DataColumn columnReport_SP;
            
            private global::System.Data.DataColumn columnSP_Params;
            
            private global::System.Data.DataColumn columnReport_Val;
            
            private global::System.Data.DataColumn columnProcess_Group;
            
            private global::System.Data.DataColumn columnRun_Type;
            
            private global::System.Data.DataColumn columnCheque_Date;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable() {
                this.TableName = "ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_LanguageColumn {
                get {
                    return this.columnUser_Language;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_ProfileColumn {
                get {
                    return this.columnUser_Profile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Payroll_ScreenColumn {
                get {
                    return this.columnPayroll_Screen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Report_TypeColumn {
                get {
                    return this.columnReport_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Report_NameColumn {
                get {
                    return this.columnReport_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Report_FormatColumn {
                get {
                    return this.columnReport_Format;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Report_SPColumn {
                get {
                    return this.columnReport_SP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SP_ParamsColumn {
                get {
                    return this.columnSP_Params;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Report_ValColumn {
                get {
                    return this.columnReport_Val;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Process_GroupColumn {
                get {
                    return this.columnProcess_Group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Run_TypeColumn {
                get {
                    return this.columnRun_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Cheque_DateColumn {
                get {
                    return this.columnCheque_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow this[int index] {
                get {
                    return ((ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChangeEventHandler ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChangeEventHandler ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChangeEventHandler ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChangeEventHandler ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow(ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow AddZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow(string TestCaseName, string TestCaseID, string User_Language, string User_Profile, string Payroll_Screen, string Report_Type, string Report_Name, string Report_Format, string Report_SP, string SP_Params, string Report_Val, string Process_Group, string Run_Type, string Cheque_Date) {
                ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow rowZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow = ((ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID,
                        User_Language,
                        User_Profile,
                        Payroll_Screen,
                        Report_Type,
                        Report_Name,
                        Report_Format,
                        Report_SP,
                        SP_Params,
                        Report_Val,
                        Process_Group,
                        Run_Type,
                        Cheque_Date};
                rowZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow);
                return rowZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable cln = ((ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnUser_Language = base.Columns["User_Language"];
                this.columnUser_Profile = base.Columns["User_Profile"];
                this.columnPayroll_Screen = base.Columns["Payroll_Screen"];
                this.columnReport_Type = base.Columns["Report_Type"];
                this.columnReport_Name = base.Columns["Report_Name"];
                this.columnReport_Format = base.Columns["Report_Format"];
                this.columnReport_SP = base.Columns["Report_SP"];
                this.columnSP_Params = base.Columns["SP_Params"];
                this.columnReport_Val = base.Columns["Report_Val"];
                this.columnProcess_Group = base.Columns["Process_Group"];
                this.columnRun_Type = base.Columns["Run_Type"];
                this.columnCheque_Date = base.Columns["Cheque_Date"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnUser_Language = new global::System.Data.DataColumn("User_Language", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Language);
                this.columnUser_Profile = new global::System.Data.DataColumn("User_Profile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Profile);
                this.columnPayroll_Screen = new global::System.Data.DataColumn("Payroll_Screen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayroll_Screen);
                this.columnReport_Type = new global::System.Data.DataColumn("Report_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport_Type);
                this.columnReport_Name = new global::System.Data.DataColumn("Report_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport_Name);
                this.columnReport_Format = new global::System.Data.DataColumn("Report_Format", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport_Format);
                this.columnReport_SP = new global::System.Data.DataColumn("Report_SP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport_SP);
                this.columnSP_Params = new global::System.Data.DataColumn("SP_Params", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSP_Params);
                this.columnReport_Val = new global::System.Data.DataColumn("Report_Val", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport_Val);
                this.columnProcess_Group = new global::System.Data.DataColumn("Process_Group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcess_Group);
                this.columnRun_Type = new global::System.Data.DataColumn("Run_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRun_Type);
                this.columnCheque_Date = new global::System.Data.DataColumn("Cheque_Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheque_Date);
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 500;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.MaxLength = 50;
                this.columnUser_Language.MaxLength = 50;
                this.columnUser_Profile.MaxLength = 50;
                this.columnPayroll_Screen.AllowDBNull = false;
                this.columnPayroll_Screen.MaxLength = 200;
                this.columnReport_Type.MaxLength = 50;
                this.columnReport_Name.MaxLength = 200;
                this.columnReport_Format.MaxLength = 10;
                this.columnReport_SP.MaxLength = 100;
                this.columnSP_Params.MaxLength = 200;
                this.columnReport_Val.MaxLength = 500;
                this.columnProcess_Group.MaxLength = 200;
                this.columnRun_Type.MaxLength = 50;
                this.columnCheque_Date.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow NewZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow() {
                return ((ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChanged != null)) {
                    this.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChanged(this, new ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChangeEvent(((ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChanging != null)) {
                    this.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChanging(this, new ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChangeEvent(((ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowDeleted != null)) {
                    this.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowDeleted(this, new ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChangeEvent(((ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowDeleting != null)) {
                    this.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowDeleting(this, new ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChangeEvent(((ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow(ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable : global::System.Data.TypedTableBase<ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow> {
            
            private global::System.Data.DataColumn columnTestCaseName;
            
            private global::System.Data.DataColumn columnTestCaseID;
            
            private global::System.Data.DataColumn columnPayroll_Screen;
            
            private global::System.Data.DataColumn columnUser_Language;
            
            private global::System.Data.DataColumn columnUser_Profile;
            
            private global::System.Data.DataColumn columnProcess_Group;
            
            private global::System.Data.DataColumn columnRun_Type;
            
            private global::System.Data.DataColumn columnCheque_Date;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable() {
                this.TableName = "ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseNameColumn {
                get {
                    return this.columnTestCaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TestCaseIDColumn {
                get {
                    return this.columnTestCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Payroll_ScreenColumn {
                get {
                    return this.columnPayroll_Screen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_LanguageColumn {
                get {
                    return this.columnUser_Language;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn User_ProfileColumn {
                get {
                    return this.columnUser_Profile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Process_GroupColumn {
                get {
                    return this.columnProcess_Group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Run_TypeColumn {
                get {
                    return this.columnRun_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Cheque_DateColumn {
                get {
                    return this.columnCheque_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow this[int index] {
                get {
                    return ((ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChangeEventHandler ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChangeEventHandler ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChangeEventHandler ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChangeEventHandler ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow(ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow AddZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow(string TestCaseName, string TestCaseID, string Payroll_Screen, string User_Language, string User_Profile, string Process_Group, string Run_Type, string Cheque_Date) {
                ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow rowZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow = ((ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCaseName,
                        TestCaseID,
                        Payroll_Screen,
                        User_Language,
                        User_Profile,
                        Process_Group,
                        Run_Type,
                        Cheque_Date};
                rowZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow);
                return rowZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable cln = ((ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTestCaseName = base.Columns["TestCaseName"];
                this.columnTestCaseID = base.Columns["TestCaseID"];
                this.columnPayroll_Screen = base.Columns["Payroll_Screen"];
                this.columnUser_Language = base.Columns["User_Language"];
                this.columnUser_Profile = base.Columns["User_Profile"];
                this.columnProcess_Group = base.Columns["Process_Group"];
                this.columnRun_Type = base.Columns["Run_Type"];
                this.columnCheque_Date = base.Columns["Cheque_Date"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTestCaseName = new global::System.Data.DataColumn("TestCaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseName);
                this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseID);
                this.columnPayroll_Screen = new global::System.Data.DataColumn("Payroll_Screen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayroll_Screen);
                this.columnUser_Language = new global::System.Data.DataColumn("User_Language", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Language);
                this.columnUser_Profile = new global::System.Data.DataColumn("User_Profile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Profile);
                this.columnProcess_Group = new global::System.Data.DataColumn("Process_Group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcess_Group);
                this.columnRun_Type = new global::System.Data.DataColumn("Run_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRun_Type);
                this.columnCheque_Date = new global::System.Data.DataColumn("Cheque_Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheque_Date);
                this.columnTestCaseName.AllowDBNull = false;
                this.columnTestCaseName.MaxLength = 500;
                this.columnTestCaseID.AllowDBNull = false;
                this.columnTestCaseID.MaxLength = 20;
                this.columnPayroll_Screen.AllowDBNull = false;
                this.columnPayroll_Screen.MaxLength = 50;
                this.columnUser_Language.MaxLength = 50;
                this.columnUser_Profile.MaxLength = 50;
                this.columnProcess_Group.MaxLength = 50;
                this.columnRun_Type.MaxLength = 50;
                this.columnCheque_Date.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow NewZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow() {
                return ((ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChanged != null)) {
                    this.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChanged(this, new ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChangeEvent(((ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChanging != null)) {
                    this.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChanging(this, new ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChangeEvent(((ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowDeleted != null)) {
                    this.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowDeleted(this, new ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChangeEvent(((ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowDeleting != null)) {
                    this.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowDeleting(this, new ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChangeEvent(((ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow(ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                testautomationioDataSet ds = new testautomationioDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Phase2TestSuiteRow : global::System.Data.DataRow {
            
            private Phase2TestSuiteDataTable tablePhase2TestSuite;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Phase2TestSuiteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePhase2TestSuite = ((Phase2TestSuiteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tablePhase2TestSuite.TestCaseIDColumn]));
                }
                set {
                    this[this.tablePhase2TestSuite.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tablePhase2TestSuite.TestCaseNameColumn]));
                }
                set {
                    this[this.tablePhase2TestSuite.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCategory {
                get {
                    try {
                        return ((string)(this[this.tablePhase2TestSuite.TestCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestCategory\' in table \'Phase2TestSuite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhase2TestSuite.TestCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsTestCategoryNull() {
                return this.IsNull(this.tablePhase2TestSuite.TestCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetTestCategoryNull() {
                this[this.tablePhase2TestSuite.TestCategoryColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SmokeTestSuiteRow : global::System.Data.DataRow {
            
            private SmokeTestSuiteDataTable tableSmokeTestSuite;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SmokeTestSuiteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSmokeTestSuite = ((SmokeTestSuiteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableSmokeTestSuite.TestCaseIDColumn]));
                }
                set {
                    this[this.tableSmokeTestSuite.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableSmokeTestSuite.TestCaseNameColumn]));
                }
                set {
                    this[this.tableSmokeTestSuite.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCategory {
                get {
                    try {
                        return ((string)(this[this.tableSmokeTestSuite.TestCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestCategory\' in table \'SmokeTestSuite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSmokeTestSuite.TestCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsTestCategoryNull() {
                return this.IsNull(this.tableSmokeTestSuite.TestCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetTestCategoryNull() {
                this[this.tableSmokeTestSuite.TestCategoryColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen = ((ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Language {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.User_LanguageColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.User_LanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Profile {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.User_ProfileColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.User_ProfileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string HR_Screen {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.HR_ScreenColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.HR_ScreenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Verify_TextFields {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_TextFieldsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verify_TextFields\' in table \'ZHRX_CAN_HR_UI_000100_Verify_H" +
                                "uman_Resources_Employee_Screen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_TextFieldsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Verify_Buttons {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_ButtonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verify_Buttons\' in table \'ZHRX_CAN_HR_UI_000100_Verify_Huma" +
                                "n_Resources_Employee_Screen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_ButtonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Verify_DropDowns {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_DropDownsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verify_DropDowns\' in table \'ZHRX_CAN_HR_UI_000100_Verify_Hu" +
                                "man_Resources_Employee_Screen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_DropDownsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Verify_CheckBoxes {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_CheckBoxesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verify_CheckBoxes\' in table \'ZHRX_CAN_HR_UI_000100_Verify_H" +
                                "uman_Resources_Employee_Screen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_CheckBoxesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Verify_ToolBars {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_ToolBarsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verify_ToolBars\' in table \'ZHRX_CAN_HR_UI_000100_Verify_Hum" +
                                "an_Resources_Employee_Screen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_ToolBarsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Verify_TableColumns {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_TableColumnsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verify_TableColumns\' in table \'ZHRX_CAN_HR_UI_000100_Verify" +
                                "_Human_Resources_Employee_Screen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_TableColumnsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Verify_LabelFields {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_LabelFieldsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verify_LabelFields\' in table \'ZHRX_CAN_HR_UI_000100_Verify_" +
                                "Human_Resources_Employee_Screen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_LabelFieldsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsVerify_TextFieldsNull() {
                return this.IsNull(this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_TextFieldsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetVerify_TextFieldsNull() {
                this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_TextFieldsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsVerify_ButtonsNull() {
                return this.IsNull(this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_ButtonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetVerify_ButtonsNull() {
                this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_ButtonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsVerify_DropDownsNull() {
                return this.IsNull(this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_DropDownsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetVerify_DropDownsNull() {
                this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_DropDownsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsVerify_CheckBoxesNull() {
                return this.IsNull(this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_CheckBoxesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetVerify_CheckBoxesNull() {
                this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_CheckBoxesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsVerify_ToolBarsNull() {
                return this.IsNull(this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_ToolBarsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetVerify_ToolBarsNull() {
                this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_ToolBarsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsVerify_TableColumnsNull() {
                return this.IsNull(this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_TableColumnsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetVerify_TableColumnsNull() {
                this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_TableColumnsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsVerify_LabelFieldsNull() {
                return this.IsNull(this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_LabelFieldsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetVerify_LabelFieldsNull() {
                this[this.tableZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Verify_LabelFieldsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English = ((ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French = ((ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen = ((ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen = ((ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction = ((ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess = ((ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments = ((ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import = ((ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_000900_Payroll_Screen_Import.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports = ((ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy = ((ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001100_Setup_Screen_Policy.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement = ((ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor = ((ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group = ((ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level = ((ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template = ((ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode = ((ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance = ((ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Admin_Options {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance.Admin_OptionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Admin_Options\' in table \'ZHRX_CAN_HR_UI_001800_Admin_Code_M" +
                                "aintenance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance.Admin_OptionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsAdmin_OptionsNull() {
                return this.IsNull(this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance.Admin_OptionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetAdmin_OptionsNull() {
                this[this.tableZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance.Admin_OptionsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable tableZHRX_CAN_HR_UI_001900_Admin_Code_System;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_001900_Admin_Code_System = ((ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001900_Admin_Code_System.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001900_Admin_Code_System.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_001900_Admin_Code_System.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_001900_Admin_Code_System.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor = ((ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor = ((ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002100_Admin_Language_Editor.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP = ((ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002200_Admin_Export_FTP.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config = ((ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Admin_Options {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config.Admin_OptionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Admin_Options\' in table \'ZHRX_CAN_HR_UI_002300_Admin_Custom" +
                                "_Field_Config\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config.Admin_OptionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsAdmin_OptionsNull() {
                return this.IsNull(this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config.Admin_OptionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetAdmin_OptionsNull() {
                this[this.tableZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config.Admin_OptionsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_002400_Admin_SecurityRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable tableZHRX_CAN_HR_UI_002400_Admin_Security;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_002400_Admin_SecurityRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_002400_Admin_Security = ((ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_002400_Admin_Security.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002400_Admin_Security.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_002400_Admin_Security.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002400_Admin_Security.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Admin_Options {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_HR_UI_002400_Admin_Security.Admin_OptionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Admin_Options\' in table \'ZHRX_CAN_HR_UI_002400_Admin_Securi" +
                                "ty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002400_Admin_Security.Admin_OptionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsAdmin_OptionsNull() {
                return this.IsNull(this.tableZHRX_CAN_HR_UI_002400_Admin_Security.Admin_OptionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetAdmin_OptionsNull() {
                this[this.tableZHRX_CAN_HR_UI_002400_Admin_Security.Admin_OptionsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_HR_UI_002500_HelpRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_HR_UI_002500_HelpDataTable tableZHRX_CAN_HR_UI_002500_Help;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_HR_UI_002500_HelpRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_HR_UI_002500_Help = ((ZHRX_CAN_HR_UI_002500_HelpDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_002500_Help.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002500_Help.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_HR_UI_002500_Help.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002500_Help.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Help_Options {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_HR_UI_002500_Help.Help_OptionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Help_Options\' in table \'ZHRX_CAN_HR_UI_002500_Help\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_HR_UI_002500_Help.Help_OptionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsHelp_OptionsNull() {
                return this.IsNull(this.tableZHRX_CAN_HR_UI_002500_Help.Help_OptionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetHelp_OptionsNull() {
                this[this.tableZHRX_CAN_HR_UI_002500_Help.Help_OptionsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee = ((ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record = ((ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record = ((ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record.TestCaseIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group = ((ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Language {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.User_LanguageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User_Language\' in table \'ZHRX_CAN_Payroll_001000_Create_Pay" +
                                "roll_Processing_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.User_LanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Profile {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.User_ProfileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User_Profile\' in table \'ZHRX_CAN_Payroll_001000_Create_Payr" +
                                "oll_Processing_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.User_ProfileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Setup_Screen {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Setup_ScreenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Setup_Screen\' in table \'ZHRX_CAN_Payroll_001000_Create_Payr" +
                                "oll_Processing_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Setup_ScreenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Country\' in table \'ZHRX_CAN_Payroll_001000_Create_Payroll_P" +
                                "rocessing_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Pay_Frequency {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Pay_FrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pay_Frequency\' in table \'ZHRX_CAN_Payroll_001000_Create_Pay" +
                                "roll_Processing_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Pay_FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Process_Group {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Process_GroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Process_Group\' in table \'ZHRX_CAN_Payroll_001000_Create_Pay" +
                                "roll_Processing_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Process_GroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string English_Desc {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.English_DescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'English_Desc\' in table \'ZHRX_CAN_Payroll_001000_Create_Payr" +
                                "oll_Processing_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.English_DescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string French_Desc {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.French_DescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'French_Desc\' in table \'ZHRX_CAN_Payroll_001000_Create_Payro" +
                                "ll_Processing_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.French_DescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Period {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.PeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Period\' in table \'ZHRX_CAN_Payroll_001000_Create_Payroll_Pr" +
                                "ocessing_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.PeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Start_Date {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Start_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Start_Date\' in table \'ZHRX_CAN_Payroll_001000_Create_Payrol" +
                                "l_Processing_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Start_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Cutoff_Date {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Cutoff_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cutoff_Date\' in table \'ZHRX_CAN_Payroll_001000_Create_Payro" +
                                "ll_Processing_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Cutoff_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUser_LanguageNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.User_LanguageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUser_LanguageNull() {
                this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.User_LanguageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUser_ProfileNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.User_ProfileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUser_ProfileNull() {
                this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.User_ProfileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSetup_ScreenNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Setup_ScreenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSetup_ScreenNull() {
                this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Setup_ScreenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsCountryNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetCountryNull() {
                this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsPay_FrequencyNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Pay_FrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetPay_FrequencyNull() {
                this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Pay_FrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsProcess_GroupNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Process_GroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetProcess_GroupNull() {
                this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Process_GroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsEnglish_DescNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.English_DescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetEnglish_DescNull() {
                this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.English_DescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsFrench_DescNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.French_DescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetFrench_DescNull() {
                this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.French_DescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsPeriodNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.PeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetPeriodNull() {
                this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.PeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsStart_DateNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Start_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetStart_DateNull() {
                this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Start_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsCutoff_DateNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Cutoff_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetCutoff_DateNull() {
                this[this.tableZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Cutoff_DateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_Payroll_001200_Calculate_PayrollRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable tableZHRX_CAN_Payroll_001200_Calculate_Payroll;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_Payroll_001200_Calculate_PayrollRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll = ((ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Payroll_Screen {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Payroll_ScreenColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Payroll_ScreenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Language {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.User_LanguageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User_Language\' in table \'ZHRX_CAN_Payroll_001200_Calculate_" +
                                "Payroll\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.User_LanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Profile {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.User_ProfileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User_Profile\' in table \'ZHRX_CAN_Payroll_001200_Calculate_P" +
                                "ayroll\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.User_ProfileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Process_Group {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Process_GroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Process_Group\' in table \'ZHRX_CAN_Payroll_001200_Calculate_" +
                                "Payroll\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Process_GroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Run_Type {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Run_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Run_Type\' in table \'ZHRX_CAN_Payroll_001200_Calculate_Payro" +
                                "ll\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Run_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Cheque_Date {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Cheque_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cheque_Date\' in table \'ZHRX_CAN_Payroll_001200_Calculate_Pa" +
                                "yroll\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Cheque_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUser_LanguageNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.User_LanguageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUser_LanguageNull() {
                this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.User_LanguageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUser_ProfileNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.User_ProfileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUser_ProfileNull() {
                this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.User_ProfileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsProcess_GroupNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Process_GroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetProcess_GroupNull() {
                this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Process_GroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsRun_TypeNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Run_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetRun_TypeNull() {
                this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Run_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsCheque_DateNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Cheque_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetCheque_DateNull() {
                this[this.tableZHRX_CAN_Payroll_001200_Calculate_Payroll.Cheque_DateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding = ((ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Language {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.User_LanguageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User_Language\' in table \'ZHRX_CAN_Payroll_001300_Verify_Sta" +
                                "ndard_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.User_LanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Profile {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.User_ProfileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User_Profile\' in table \'ZHRX_CAN_Payroll_001300_Verify_Stan" +
                                "dard_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.User_ProfileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Payroll_Screen {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Payroll_ScreenColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Payroll_ScreenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Report_Type {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Report_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report_Type\' in table \'ZHRX_CAN_Payroll_001300_Verify_Stand" +
                                "ard_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Report_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Report_Name {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Report_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report_Name\' in table \'ZHRX_CAN_Payroll_001300_Verify_Stand" +
                                "ard_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Report_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Report_Format {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Report_FormatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report_Format\' in table \'ZHRX_CAN_Payroll_001300_Verify_Sta" +
                                "ndard_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Report_FormatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ReportHeader_SP {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportHeader_SPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportHeader_SP\' in table \'ZHRX_CAN_Payroll_001300_Verify_S" +
                                "tandard_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportHeader_SPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string SP_Params {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.SP_ParamsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SP_Params\' in table \'ZHRX_CAN_Payroll_001300_Verify_Standar" +
                                "d_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.SP_ParamsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ReportHeader_Val {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportHeader_ValColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportHeader_Val\' in table \'ZHRX_CAN_Payroll_001300_Verify_" +
                                "Standard_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportHeader_ValColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ReportSection_SP {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportSection_SPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportSection_SP\' in table \'ZHRX_CAN_Payroll_001300_Verify_" +
                                "Standard_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportSection_SPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Get_ColumnNames {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Get_ColumnNamesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Get_ColumnNames\' in table \'ZHRX_CAN_Payroll_001300_Verify_S" +
                                "tandard_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Get_ColumnNamesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ReportTotal_SP {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportTotal_SPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportTotal_SP\' in table \'ZHRX_CAN_Payroll_001300_Verify_St" +
                                "andard_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportTotal_SPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Process_Group {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Process_GroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Process_Group\' in table \'ZHRX_CAN_Payroll_001300_Verify_Sta" +
                                "ndard_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Process_GroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Run_Type {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Run_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Run_Type\' in table \'ZHRX_CAN_Payroll_001300_Verify_Standard" +
                                "_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Run_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Cheque_Date {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Cheque_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cheque_Date\' in table \'ZHRX_CAN_Payroll_001300_Verify_Stand" +
                                "ard_Reports_Payroll_Funding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Cheque_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUser_LanguageNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.User_LanguageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUser_LanguageNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.User_LanguageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUser_ProfileNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.User_ProfileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUser_ProfileNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.User_ProfileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReport_TypeNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Report_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReport_TypeNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Report_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReport_NameNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Report_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReport_NameNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Report_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReport_FormatNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Report_FormatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReport_FormatNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Report_FormatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReportHeader_SPNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportHeader_SPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReportHeader_SPNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportHeader_SPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSP_ParamsNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.SP_ParamsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSP_ParamsNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.SP_ParamsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReportHeader_ValNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportHeader_ValColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReportHeader_ValNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportHeader_ValColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReportSection_SPNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportSection_SPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReportSection_SPNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportSection_SPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGet_ColumnNamesNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Get_ColumnNamesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGet_ColumnNamesNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Get_ColumnNamesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReportTotal_SPNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportTotal_SPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReportTotal_SPNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.ReportTotal_SPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsProcess_GroupNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Process_GroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetProcess_GroupNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Process_GroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsRun_TypeNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Run_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetRun_TypeNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Run_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsCheque_DateNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Cheque_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetCheque_DateNull() {
                this[this.tableZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Cheque_DateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary = ((ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Language {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.User_LanguageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User_Language\' in table \'ZHRX_CAN_Payroll_001400_Verify_Sta" +
                                "ndard_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.User_LanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Profile {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.User_ProfileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User_Profile\' in table \'ZHRX_CAN_Payroll_001400_Verify_Stan" +
                                "dard_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.User_ProfileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Payroll_Screen {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Payroll_ScreenColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Payroll_ScreenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Report_Type {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Report_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report_Type\' in table \'ZHRX_CAN_Payroll_001400_Verify_Stand" +
                                "ard_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Report_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Report_Name {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Report_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report_Name\' in table \'ZHRX_CAN_Payroll_001400_Verify_Stand" +
                                "ard_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Report_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Report_Format {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Report_FormatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report_Format\' in table \'ZHRX_CAN_Payroll_001400_Verify_Sta" +
                                "ndard_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Report_FormatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ReportHeader_SP {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportHeader_SPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportHeader_SP\' in table \'ZHRX_CAN_Payroll_001400_Verify_S" +
                                "tandard_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportHeader_SPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string SP_Params {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.SP_ParamsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SP_Params\' in table \'ZHRX_CAN_Payroll_001400_Verify_Standar" +
                                "d_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.SP_ParamsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ReportHeader_Val {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportHeader_ValColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportHeader_Val\' in table \'ZHRX_CAN_Payroll_001400_Verify_" +
                                "Standard_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportHeader_ValColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ReportSection_SP {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportSection_SPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportSection_SP\' in table \'ZHRX_CAN_Payroll_001400_Verify_" +
                                "Standard_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportSection_SPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Get_ColumnNames {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Get_ColumnNamesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Get_ColumnNames\' in table \'ZHRX_CAN_Payroll_001400_Verify_S" +
                                "tandard_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Get_ColumnNamesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ReportTotal_SP {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportTotal_SPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportTotal_SP\' in table \'ZHRX_CAN_Payroll_001400_Verify_St" +
                                "andard_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportTotal_SPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Process_Group {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Process_GroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Process_Group\' in table \'ZHRX_CAN_Payroll_001400_Verify_Sta" +
                                "ndard_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Process_GroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Run_Type {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Run_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Run_Type\' in table \'ZHRX_CAN_Payroll_001400_Verify_Standard" +
                                "_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Run_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Cheque_Date {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Cheque_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cheque_Date\' in table \'ZHRX_CAN_Payroll_001400_Verify_Stand" +
                                "ard_Reports_Register_Detail_Register_Summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Cheque_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUser_LanguageNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.User_LanguageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUser_LanguageNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.User_LanguageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUser_ProfileNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.User_ProfileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUser_ProfileNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.User_ProfileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReport_TypeNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Report_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReport_TypeNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Report_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReport_NameNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Report_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReport_NameNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Report_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReport_FormatNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Report_FormatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReport_FormatNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Report_FormatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReportHeader_SPNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportHeader_SPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReportHeader_SPNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportHeader_SPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSP_ParamsNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.SP_ParamsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSP_ParamsNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.SP_ParamsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReportHeader_ValNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportHeader_ValColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReportHeader_ValNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportHeader_ValColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReportSection_SPNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportSection_SPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReportSection_SPNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportSection_SPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGet_ColumnNamesNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Get_ColumnNamesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGet_ColumnNamesNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Get_ColumnNamesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReportTotal_SPNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportTotal_SPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReportTotal_SPNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.ReportTotal_SPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsProcess_GroupNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Process_GroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetProcess_GroupNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Process_GroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsRun_TypeNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Run_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetRun_TypeNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Run_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsCheque_DateNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Cheque_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetCheque_DateNull() {
                this[this.tableZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Cheque_DateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes = ((ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Language {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.User_LanguageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User_Language\' in table \'ZHRX_CAN_Payroll_001600_Verify_Sta" +
                                "ndard_Reports_Changes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.User_LanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Profile {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.User_ProfileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User_Profile\' in table \'ZHRX_CAN_Payroll_001600_Verify_Stan" +
                                "dard_Reports_Changes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.User_ProfileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Payroll_Screen {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Payroll_ScreenColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Payroll_ScreenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Report_Type {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report_Type\' in table \'ZHRX_CAN_Payroll_001600_Verify_Stand" +
                                "ard_Reports_Changes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Report_Name {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report_Name\' in table \'ZHRX_CAN_Payroll_001600_Verify_Stand" +
                                "ard_Reports_Changes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Report_Format {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_FormatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report_Format\' in table \'ZHRX_CAN_Payroll_001600_Verify_Sta" +
                                "ndard_Reports_Changes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_FormatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Report_SP {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_SPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report_SP\' in table \'ZHRX_CAN_Payroll_001600_Verify_Standar" +
                                "d_Reports_Changes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_SPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string SP_Params {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.SP_ParamsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SP_Params\' in table \'ZHRX_CAN_Payroll_001600_Verify_Standar" +
                                "d_Reports_Changes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.SP_ParamsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Report_Val {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_ValColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report_Val\' in table \'ZHRX_CAN_Payroll_001600_Verify_Standa" +
                                "rd_Reports_Changes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_ValColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Process_Group {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Process_GroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Process_Group\' in table \'ZHRX_CAN_Payroll_001600_Verify_Sta" +
                                "ndard_Reports_Changes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Process_GroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Run_Type {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Run_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Run_Type\' in table \'ZHRX_CAN_Payroll_001600_Verify_Standard" +
                                "_Reports_Changes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Run_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Cheque_Date {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Cheque_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cheque_Date\' in table \'ZHRX_CAN_Payroll_001600_Verify_Stand" +
                                "ard_Reports_Changes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Cheque_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUser_LanguageNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.User_LanguageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUser_LanguageNull() {
                this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.User_LanguageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUser_ProfileNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.User_ProfileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUser_ProfileNull() {
                this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.User_ProfileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReport_TypeNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReport_TypeNull() {
                this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReport_NameNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReport_NameNull() {
                this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReport_FormatNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_FormatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReport_FormatNull() {
                this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_FormatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReport_SPNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_SPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReport_SPNull() {
                this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_SPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSP_ParamsNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.SP_ParamsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSP_ParamsNull() {
                this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.SP_ParamsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReport_ValNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_ValColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReport_ValNull() {
                this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Report_ValColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsProcess_GroupNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Process_GroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetProcess_GroupNull() {
                this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Process_GroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsRun_TypeNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Run_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetRun_TypeNull() {
                this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Run_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsCheque_DateNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Cheque_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetCheque_DateNull() {
                this[this.tableZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Cheque_DateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow : global::System.Data.DataRow {
            
            private ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period = ((ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseName {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.TestCaseNameColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.TestCaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TestCaseID {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.TestCaseIDColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.TestCaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Payroll_Screen {
                get {
                    return ((string)(this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Payroll_ScreenColumn]));
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Payroll_ScreenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Language {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.User_LanguageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User_Language\' in table \'ZHRX_CAN_Payroll_Reports_001000_Ru" +
                                "n_payroll_for_available_Pay_Period\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.User_LanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string User_Profile {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.User_ProfileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User_Profile\' in table \'ZHRX_CAN_Payroll_Reports_001000_Run" +
                                "_payroll_for_available_Pay_Period\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.User_ProfileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Process_Group {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Process_GroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Process_Group\' in table \'ZHRX_CAN_Payroll_Reports_001000_Ru" +
                                "n_payroll_for_available_Pay_Period\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Process_GroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Run_Type {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Run_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Run_Type\' in table \'ZHRX_CAN_Payroll_Reports_001000_Run_pay" +
                                "roll_for_available_Pay_Period\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Run_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Cheque_Date {
                get {
                    try {
                        return ((string)(this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Cheque_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cheque_Date\' in table \'ZHRX_CAN_Payroll_Reports_001000_Run_" +
                                "payroll_for_available_Pay_Period\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Cheque_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUser_LanguageNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.User_LanguageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUser_LanguageNull() {
                this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.User_LanguageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUser_ProfileNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.User_ProfileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUser_ProfileNull() {
                this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.User_ProfileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsProcess_GroupNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Process_GroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetProcess_GroupNull() {
                this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Process_GroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsRun_TypeNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Run_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetRun_TypeNull() {
                this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Run_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsCheque_DateNull() {
                return this.IsNull(this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Cheque_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetCheque_DateNull() {
                this[this.tableZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Cheque_DateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Phase2TestSuiteRowChangeEvent : global::System.EventArgs {
            
            private Phase2TestSuiteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Phase2TestSuiteRowChangeEvent(Phase2TestSuiteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Phase2TestSuiteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class SmokeTestSuiteRowChangeEvent : global::System.EventArgs {
            
            private SmokeTestSuiteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SmokeTestSuiteRowChangeEvent(SmokeTestSuiteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SmokeTestSuiteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRowChangeEvent(ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRowChangeEvent(ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRowChangeEvent(ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRowChangeEvent(ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRowChangeEvent(ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRowChangeEvent(ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRowChangeEvent(ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRowChangeEvent(ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRowChangeEvent(ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRowChangeEvent(ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRowChangeEvent(ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRowChangeEvent(ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRowChangeEvent(ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRowChangeEvent(ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRowChangeEvent(ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRowChangeEvent(ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRowChangeEvent(ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRowChangeEvent(ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRowChangeEvent(ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_001900_Admin_Code_SystemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRowChangeEvent(ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRowChangeEvent(ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002100_Admin_Language_EditorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRowChangeEvent(ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002200_Admin_Export_FTPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRowChangeEvent(ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_002400_Admin_SecurityRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002400_Admin_SecurityRowChangeEvent(ZHRX_CAN_HR_UI_002400_Admin_SecurityRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002400_Admin_SecurityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_HR_UI_002500_HelpRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_HR_UI_002500_HelpRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002500_HelpRowChangeEvent(ZHRX_CAN_HR_UI_002500_HelpRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_HR_UI_002500_HelpRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRowChangeEvent(ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRowChangeEvent(ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRowChangeEvent(ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRowChangeEvent(ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_Payroll_001200_Calculate_PayrollRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001200_Calculate_PayrollRowChangeEvent(ZHRX_CAN_Payroll_001200_Calculate_PayrollRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001200_Calculate_PayrollRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRowChangeEvent(ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRowChangeEvent(ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRowChangeEvent(ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChangeEvent : global::System.EventArgs {
            
            private ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRowChangeEvent(ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace WL.TestAuto.testautomationioDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Phase2TestSuiteTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Phase2TestSuiteTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Phase2TestSuite";
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCategory", "TestCategory");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Phase2TestSuite] ([TestCaseID], [TestCaseName], [TestCategory]" +
                ") VALUES (@TestCaseID, @TestCaseName, @TestCategory)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCategory", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseID, TestCaseName, TestCategory FROM dbo.Phase2TestSuite";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.Phase2TestSuiteDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.Phase2TestSuiteDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.Phase2TestSuiteDataTable dataTable = new testautomationioDataSet.Phase2TestSuiteDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.Phase2TestSuiteDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Phase2TestSuite");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseID, string TestCaseName, string TestCategory) {
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseID));
            }
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseName));
            }
            if ((TestCategory == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TestCategory));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SmokeTestSuiteTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public SmokeTestSuiteTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SmokeTestSuite";
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCategory", "TestCategory");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SmokeTestSuite] WHERE (([TestCaseID] = @Original_TestCaseID) A" +
                "ND ([TestCaseName] = @Original_TestCaseName) AND ((@IsNull_TestCategory = 1 AND " +
                "[TestCategory] IS NULL) OR ([TestCategory] = @Original_TestCategory)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TestCategory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCategory", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCategory", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCategory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SmokeTestSuite] ([TestCaseID], [TestCaseName], [TestCategory])" +
                " VALUES (@TestCaseID, @TestCaseName, @TestCategory);\r\nSELECT TestCaseID, TestCas" +
                "eName, TestCategory FROM SmokeTestSuite WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCategory", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SmokeTestSuite] SET [TestCaseID] = @TestCaseID, [TestCaseName] = @TestCaseName, [TestCategory] = @TestCategory WHERE (([TestCaseID] = @Original_TestCaseID) AND ([TestCaseName] = @Original_TestCaseName) AND ((@IsNull_TestCategory = 1 AND [TestCategory] IS NULL) OR ([TestCategory] = @Original_TestCategory)));
SELECT TestCaseID, TestCaseName, TestCategory FROM SmokeTestSuite WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCategory", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TestCategory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCategory", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCategory", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCategory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseID, TestCaseName, TestCategory FROM dbo.SmokeTestSuite";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.SmokeTestSuiteDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.SmokeTestSuiteDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.SmokeTestSuiteDataTable dataTable = new testautomationioDataSet.SmokeTestSuiteDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.SmokeTestSuiteDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SmokeTestSuite");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseID, string Original_TestCaseName, string Original_TestCategory) {
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCategory == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_TestCategory));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseID, string TestCaseName, string TestCategory) {
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseID));
            }
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseName));
            }
            if ((TestCategory == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TestCategory));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseID, string TestCaseName, string TestCategory, string Original_TestCaseID, string Original_TestCaseName, string Original_TestCategory) {
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseID));
            }
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseName));
            }
            if ((TestCategory == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TestCategory));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCategory == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_TestCategory));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCategory, string Original_TestCaseID, string Original_TestCaseName, string Original_TestCategory) {
            return this.Update(Original_TestCaseID, TestCaseName, TestCategory, Original_TestCaseID, Original_TestCaseName, Original_TestCategory);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("User_Language", "User_Language");
            tableMapping.ColumnMappings.Add("User_Profile", "User_Profile");
            tableMapping.ColumnMappings.Add("HR_Screen", "HR_Screen");
            tableMapping.ColumnMappings.Add("Verify_TextFields", "Verify_TextFields");
            tableMapping.ColumnMappings.Add("Verify_Buttons", "Verify_Buttons");
            tableMapping.ColumnMappings.Add("Verify_DropDowns", "Verify_DropDowns");
            tableMapping.ColumnMappings.Add("Verify_CheckBoxes", "Verify_CheckBoxes");
            tableMapping.ColumnMappings.Add("Verify_ToolBars", "Verify_ToolBars");
            tableMapping.ColumnMappings.Add("Verify_TableColumns", "Verify_TableColumns");
            tableMapping.ColumnMappings.Add("Verify_LabelFields", "Verify_LabelFields");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen] WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID) AND ([User_Language] = @Original_User_Language) AND ([User_Profile] = @Original_User_Profile) AND ([HR_Screen] = @Original_HR_Screen) AND ((@IsNull_Verify_TextFields = 1 AND [Verify_TextFields] IS NULL) OR ([Verify_TextFields] = @Original_Verify_TextFields)) AND ((@IsNull_Verify_Buttons = 1 AND [Verify_Buttons] IS NULL) OR ([Verify_Buttons] = @Original_Verify_Buttons)) AND ((@IsNull_Verify_DropDowns = 1 AND [Verify_DropDowns] IS NULL) OR ([Verify_DropDowns] = @Original_Verify_DropDowns)) AND ((@IsNull_Verify_CheckBoxes = 1 AND [Verify_CheckBoxes] IS NULL) OR ([Verify_CheckBoxes] = @Original_Verify_CheckBoxes)) AND ((@IsNull_Verify_ToolBars = 1 AND [Verify_ToolBars] IS NULL) OR ([Verify_ToolBars] = @Original_Verify_ToolBars)) AND ((@IsNull_Verify_TableColumns = 1 AND [Verify_TableColumns] IS NULL) OR ([Verify_TableColumns] = @Original_Verify_TableColumns)) AND ((@IsNull_Verify_LabelFields = 1 AND [Verify_LabelFields] IS NULL) OR ([Verify_LabelFields] = @Original_Verify_LabelFields)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_User_Language", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Language", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_User_Profile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Profile", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HR_Screen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HR_Screen", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_TextFields", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_TextFields", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_TextFields", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_TextFields", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_Buttons", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_Buttons", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_Buttons", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_Buttons", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_DropDowns", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_DropDowns", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_DropDowns", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_DropDowns", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_CheckBoxes", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_CheckBoxes", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_CheckBoxes", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_CheckBoxes", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_ToolBars", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_ToolBars", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_ToolBars", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_ToolBars", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_TableColumns", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_TableColumns", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_TableColumns", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_TableColumns", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_LabelFields", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_LabelFields", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_LabelFields", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_LabelFields", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen] ([TestCaseName], [TestCaseID], [User_Language], [User_Profile], [HR_Screen], [Verify_TextFields], [Verify_Buttons], [Verify_DropDowns], [Verify_CheckBoxes], [Verify_ToolBars], [Verify_TableColumns], [Verify_LabelFields]) VALUES (@TestCaseName, @TestCaseID, @User_Language, @User_Profile, @HR_Screen, @Verify_TextFields, @Verify_Buttons, @Verify_DropDowns, @Verify_CheckBoxes, @Verify_ToolBars, @Verify_TableColumns, @Verify_LabelFields);
SELECT TestCaseName, TestCaseID, User_Language, User_Profile, HR_Screen, Verify_TextFields, Verify_Buttons, Verify_DropDowns, Verify_CheckBoxes, Verify_ToolBars, Verify_TableColumns, Verify_LabelFields FROM ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Language", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Language", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Profile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Profile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HR_Screen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HR_Screen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_TextFields", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_TextFields", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_Buttons", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_Buttons", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_DropDowns", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_DropDowns", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_CheckBoxes", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_CheckBoxes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_ToolBars", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_ToolBars", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_TableColumns", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_TableColumns", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_LabelFields", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_LabelFields", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen] SET [" +
                "TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID, [User_Language] = @Us" +
                "er_Language, [User_Profile] = @User_Profile, [HR_Screen] = @HR_Screen, [Verify_T" +
                "extFields] = @Verify_TextFields, [Verify_Buttons] = @Verify_Buttons, [Verify_Dro" +
                "pDowns] = @Verify_DropDowns, [Verify_CheckBoxes] = @Verify_CheckBoxes, [Verify_T" +
                "oolBars] = @Verify_ToolBars, [Verify_TableColumns] = @Verify_TableColumns, [Veri" +
                "fy_LabelFields] = @Verify_LabelFields WHERE (([TestCaseName] = @Original_TestCas" +
                "eName) AND ([TestCaseID] = @Original_TestCaseID) AND ([User_Language] = @Origina" +
                "l_User_Language) AND ([User_Profile] = @Original_User_Profile) AND ([HR_Screen] " +
                "= @Original_HR_Screen) AND ((@IsNull_Verify_TextFields = 1 AND [Verify_TextField" +
                "s] IS NULL) OR ([Verify_TextFields] = @Original_Verify_TextFields)) AND ((@IsNul" +
                "l_Verify_Buttons = 1 AND [Verify_Buttons] IS NULL) OR ([Verify_Buttons] = @Origi" +
                "nal_Verify_Buttons)) AND ((@IsNull_Verify_DropDowns = 1 AND [Verify_DropDowns] I" +
                "S NULL) OR ([Verify_DropDowns] = @Original_Verify_DropDowns)) AND ((@IsNull_Veri" +
                "fy_CheckBoxes = 1 AND [Verify_CheckBoxes] IS NULL) OR ([Verify_CheckBoxes] = @Or" +
                "iginal_Verify_CheckBoxes)) AND ((@IsNull_Verify_ToolBars = 1 AND [Verify_ToolBar" +
                "s] IS NULL) OR ([Verify_ToolBars] = @Original_Verify_ToolBars)) AND ((@IsNull_Ve" +
                "rify_TableColumns = 1 AND [Verify_TableColumns] IS NULL) OR ([Verify_TableColumn" +
                "s] = @Original_Verify_TableColumns)) AND ((@IsNull_Verify_LabelFields = 1 AND [V" +
                "erify_LabelFields] IS NULL) OR ([Verify_LabelFields] = @Original_Verify_LabelFie" +
                "lds)));\r\nSELECT TestCaseName, TestCaseID, User_Language, User_Profile, HR_Screen" +
                ", Verify_TextFields, Verify_Buttons, Verify_DropDowns, Verify_CheckBoxes, Verify" +
                "_ToolBars, Verify_TableColumns, Verify_LabelFields FROM ZHRX_CAN_HR_UI_000100_Ve" +
                "rify_Human_Resources_Employee_Screen WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Language", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Language", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Profile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Profile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HR_Screen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HR_Screen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_TextFields", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_TextFields", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_Buttons", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_Buttons", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_DropDowns", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_DropDowns", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_CheckBoxes", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_CheckBoxes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_ToolBars", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_ToolBars", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_TableColumns", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_TableColumns", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Verify_LabelFields", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_LabelFields", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_User_Language", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Language", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_User_Profile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Profile", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HR_Screen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HR_Screen", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_TextFields", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_TextFields", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_TextFields", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_TextFields", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_Buttons", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_Buttons", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_Buttons", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_Buttons", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_DropDowns", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_DropDowns", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_DropDowns", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_DropDowns", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_CheckBoxes", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_CheckBoxes", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_CheckBoxes", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_CheckBoxes", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_ToolBars", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_ToolBars", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_ToolBars", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_ToolBars", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_TableColumns", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_TableColumns", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_TableColumns", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_TableColumns", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Verify_LabelFields", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_LabelFields", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Verify_LabelFields", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Verify_LabelFields", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT TestCaseName, TestCaseID, User_Language, User_Profile, HR_Screen, Verify_TextFields, Verify_Buttons, Verify_DropDowns, Verify_CheckBoxes, Verify_ToolBars, Verify_TableColumns, Verify_LabelFields FROM dbo.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID, string Original_User_Language, string Original_User_Profile, string Original_HR_Screen, string Original_Verify_TextFields, string Original_Verify_Buttons, string Original_Verify_DropDowns, string Original_Verify_CheckBoxes, string Original_Verify_ToolBars, string Original_Verify_TableColumns, string Original_Verify_LabelFields) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            if ((Original_User_Language == null)) {
                throw new global::System.ArgumentNullException("Original_User_Language");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_User_Language));
            }
            if ((Original_User_Profile == null)) {
                throw new global::System.ArgumentNullException("Original_User_Profile");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_User_Profile));
            }
            if ((Original_HR_Screen == null)) {
                throw new global::System.ArgumentNullException("Original_HR_Screen");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_HR_Screen));
            }
            if ((Original_Verify_TextFields == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Verify_TextFields));
            }
            if ((Original_Verify_Buttons == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Verify_Buttons));
            }
            if ((Original_Verify_DropDowns == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Verify_DropDowns));
            }
            if ((Original_Verify_CheckBoxes == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Verify_CheckBoxes));
            }
            if ((Original_Verify_ToolBars == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_Verify_ToolBars));
            }
            if ((Original_Verify_TableColumns == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_Verify_TableColumns));
            }
            if ((Original_Verify_LabelFields == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Verify_LabelFields));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID, string User_Language, string User_Profile, string HR_Screen, string Verify_TextFields, string Verify_Buttons, string Verify_DropDowns, string Verify_CheckBoxes, string Verify_ToolBars, string Verify_TableColumns, string Verify_LabelFields) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((User_Language == null)) {
                throw new global::System.ArgumentNullException("User_Language");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(User_Language));
            }
            if ((User_Profile == null)) {
                throw new global::System.ArgumentNullException("User_Profile");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(User_Profile));
            }
            if ((HR_Screen == null)) {
                throw new global::System.ArgumentNullException("HR_Screen");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(HR_Screen));
            }
            if ((Verify_TextFields == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Verify_TextFields));
            }
            if ((Verify_Buttons == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Verify_Buttons));
            }
            if ((Verify_DropDowns == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Verify_DropDowns));
            }
            if ((Verify_CheckBoxes == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Verify_CheckBoxes));
            }
            if ((Verify_ToolBars == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Verify_ToolBars));
            }
            if ((Verify_TableColumns == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Verify_TableColumns));
            }
            if ((Verify_LabelFields == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Verify_LabelFields));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string TestCaseName, 
                    string TestCaseID, 
                    string User_Language, 
                    string User_Profile, 
                    string HR_Screen, 
                    string Verify_TextFields, 
                    string Verify_Buttons, 
                    string Verify_DropDowns, 
                    string Verify_CheckBoxes, 
                    string Verify_ToolBars, 
                    string Verify_TableColumns, 
                    string Verify_LabelFields, 
                    string Original_TestCaseName, 
                    string Original_TestCaseID, 
                    string Original_User_Language, 
                    string Original_User_Profile, 
                    string Original_HR_Screen, 
                    string Original_Verify_TextFields, 
                    string Original_Verify_Buttons, 
                    string Original_Verify_DropDowns, 
                    string Original_Verify_CheckBoxes, 
                    string Original_Verify_ToolBars, 
                    string Original_Verify_TableColumns, 
                    string Original_Verify_LabelFields) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((User_Language == null)) {
                throw new global::System.ArgumentNullException("User_Language");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(User_Language));
            }
            if ((User_Profile == null)) {
                throw new global::System.ArgumentNullException("User_Profile");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(User_Profile));
            }
            if ((HR_Screen == null)) {
                throw new global::System.ArgumentNullException("HR_Screen");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(HR_Screen));
            }
            if ((Verify_TextFields == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Verify_TextFields));
            }
            if ((Verify_Buttons == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Verify_Buttons));
            }
            if ((Verify_DropDowns == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Verify_DropDowns));
            }
            if ((Verify_CheckBoxes == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Verify_CheckBoxes));
            }
            if ((Verify_ToolBars == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Verify_ToolBars));
            }
            if ((Verify_TableColumns == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Verify_TableColumns));
            }
            if ((Verify_LabelFields == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Verify_LabelFields));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_TestCaseID));
            }
            if ((Original_User_Language == null)) {
                throw new global::System.ArgumentNullException("Original_User_Language");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_User_Language));
            }
            if ((Original_User_Profile == null)) {
                throw new global::System.ArgumentNullException("Original_User_Profile");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_User_Profile));
            }
            if ((Original_HR_Screen == null)) {
                throw new global::System.ArgumentNullException("Original_HR_Screen");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_HR_Screen));
            }
            if ((Original_Verify_TextFields == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_Verify_TextFields));
            }
            if ((Original_Verify_Buttons == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_Verify_Buttons));
            }
            if ((Original_Verify_DropDowns == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_Verify_DropDowns));
            }
            if ((Original_Verify_CheckBoxes == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_Verify_CheckBoxes));
            }
            if ((Original_Verify_ToolBars == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_Verify_ToolBars));
            }
            if ((Original_Verify_TableColumns == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_Verify_TableColumns));
            }
            if ((Original_Verify_LabelFields == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_Verify_LabelFields));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string TestCaseName, 
                    string User_Language, 
                    string User_Profile, 
                    string HR_Screen, 
                    string Verify_TextFields, 
                    string Verify_Buttons, 
                    string Verify_DropDowns, 
                    string Verify_CheckBoxes, 
                    string Verify_ToolBars, 
                    string Verify_TableColumns, 
                    string Verify_LabelFields, 
                    string Original_TestCaseName, 
                    string Original_TestCaseID, 
                    string Original_User_Language, 
                    string Original_User_Profile, 
                    string Original_HR_Screen, 
                    string Original_Verify_TextFields, 
                    string Original_Verify_Buttons, 
                    string Original_Verify_DropDowns, 
                    string Original_Verify_CheckBoxes, 
                    string Original_Verify_ToolBars, 
                    string Original_Verify_TableColumns, 
                    string Original_Verify_LabelFields) {
            return this.Update(TestCaseName, Original_TestCaseID, User_Language, User_Profile, HR_Screen, Verify_TextFields, Verify_Buttons, Verify_DropDowns, Verify_CheckBoxes, Verify_ToolBars, Verify_TableColumns, Verify_LabelFields, Original_TestCaseName, Original_TestCaseID, Original_User_Language, Original_User_Profile, Original_HR_Screen, Original_Verify_TextFields, Original_Verify_Buttons, Original_Verify_DropDowns, Original_Verify_CheckBoxes, Original_Verify_ToolBars, Original_Verify_TableColumns, Original_Verify_LabelFields);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Sc" +
                "reens_In_English] WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCas" +
                "eID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English] ([TestCaseName], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_000200_Verify_Human_Resou" +
                "rces_HR_Screen_Open_Screens_In_English";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French] WHERE " +
                "(([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCas" +
                "eID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French] ([TestCaseName], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Scr" +
                "eens_In_French";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen] WHERE ((" +
                "[TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseI" +
                "D))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen] ([TestCaseName], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Emp" +
                "loyee_Screen";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen] WHERE (([Te" +
                "stCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))" +
                "";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen] ([TestCaseName], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Bat" +
                "ch_Screen";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction] WHER" +
                "E (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestC" +
                "aseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction] ([TestCaseName], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Pay" +
                "roll_Transaction";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess] WHERE (([" +
                "TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID" +
                "))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess] ([TestCaseName], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_000700_Payroll_Screen_Pay" +
                "rollProcess";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments] WHERE (([TestCa" +
                "seName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments] ([TestCaseName]" +
                ", [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);\r\nSELECT TestCaseName, TestC" +
                "aseID FROM ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments WHERE (TestCaseID = @Te" +
                "stCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_000800_Payroll_Screen_Pay" +
                "ments";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import] WHERE (([TestCase" +
                "Name] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import] ([TestCaseName], " +
                "[TestCaseID]) VALUES (@TestCaseName, @TestCaseID);\r\nSELECT TestCaseName, TestCas" +
                "eID FROM ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import WHERE (TestCaseID = @TestCa" +
                "seID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_000900_Payroll_Screen_Imp" +
                "ort";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports] WHERE (([TestCas" +
                "eName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports] ([TestCaseName]," +
                " [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);\r\nSELECT TestCaseName, TestCa" +
                "seID FROM ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports WHERE (TestCaseID = @Test" +
                "CaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_001000_Payroll_Screen_Rep" +
                "orts";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy] WHERE (([TestCaseNa" +
                "me] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy] ([TestCaseName], [T" +
                "estCaseID]) VALUES (@TestCaseName, @TestCaseID);\r\nSELECT TestCaseName, TestCaseI" +
                "D FROM ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy WHERE (TestCaseID = @TestCaseID" +
                ")";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_001100_Setup_Screen_Polic" +
                "y";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement] WHERE (([TestC" +
                "aseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement] ([TestCaseName" +
                "], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);\r\nSELECT TestCaseName, Test" +
                "CaseID FROM ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement WHERE (TestCaseID = @" +
                "TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_001200_Setup_Screen_Entit" +
                "lement";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor] WHERE (([TestCaseNa" +
                "me] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor] ([TestCaseName], [T" +
                "estCaseID]) VALUES (@TestCaseName, @TestCaseID);\r\nSELECT TestCaseName, TestCaseI" +
                "D FROM ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor WHERE (TestCaseID = @TestCaseID" +
                ")";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendo" +
                "r";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group] W" +
                "HERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_Te" +
                "stCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group] ([TestCaseName], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payro" +
                "ll_Processing_Group";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level] " +
                "WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_T" +
                "estCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level] ([TestCaseName], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organ" +
                "izational_Unit_Level";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template] WHERE (([T" +
                "estCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID)" +
                ")";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template] ([TestCaseName], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizar" +
                "d_Template";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode] WHERE (([TestCaseN" +
                "ame] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode] ([TestCaseName], [" +
                "TestCaseID]) VALUES (@TestCaseName, @TestCaseID);\r\nSELECT TestCaseName, TestCase" +
                "ID FROM ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode WHERE (TestCaseID = @TestCase" +
                "ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_001700_Setup_Screen_Payco" +
                "de";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("Admin_Options", "Admin_Options");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance] WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID) AND ((@IsNull_Admin_Options = 1 AND [Admin_Options] IS NULL) OR ([Admin_Options] = @Original_Admin_Options)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Admin_Options", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance] ([TestCaseName], [TestCaseID], [Admin_Options]) VALUES (@TestCaseName, @TestCaseID, @Admin_Options);
SELECT TestCaseName, TestCaseID, Admin_Options FROM ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID, [Admin_Options] = @Admin_Options WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID) AND ((@IsNull_Admin_Options = 1 AND [Admin_Options] IS NULL) OR ([Admin_Options] = @Original_Admin_Options)));
SELECT TestCaseName, TestCaseID, Admin_Options FROM ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Admin_Options", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID, Admin_Options FROM dbo.ZHRX_CAN_HR_UI_001800_Adm" +
                "in_Code_Maintenance";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID, string Original_Admin_Options) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            if ((Original_Admin_Options == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Admin_Options));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID, string Admin_Options) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Admin_Options == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Admin_Options));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Admin_Options, string Original_TestCaseName, string Original_TestCaseID, string Original_Admin_Options) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Admin_Options == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Admin_Options));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_TestCaseID));
            }
            if ((Original_Admin_Options == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Admin_Options));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Admin_Options, string Original_TestCaseName, string Original_TestCaseID, string Original_Admin_Options) {
            return this.Update(TestCaseName, Original_TestCaseID, Admin_Options, Original_TestCaseName, Original_TestCaseID, Original_Admin_Options);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_001900_Admin_Code_System";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_001900_Admin_Code_System] WHERE (([TestCaseName" +
                "] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ZHRX_CAN_HR_UI_001900_Admin_Code_System] ([TestCaseName], [Tes" +
                "tCaseID]) VALUES (@TestCaseName, @TestCaseID);\r\nSELECT TestCaseName, TestCaseID " +
                "FROM ZHRX_CAN_HR_UI_001900_Admin_Code_System WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_001900_Admin_Code_System] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_001900_Admin_Code_System WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_001900_Admin_Code_System";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_001900_Admin_Code_SystemDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_001900_Admin_Code_System");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor] WHERE (([T" +
                "estCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID)" +
                ")";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor] ([TestCaseName], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Fi" +
                "eld_Editor";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_002100_Admin_Language_Editor";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_002100_Admin_Language_Editor] WHERE (([TestCase" +
                "Name] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ZHRX_CAN_HR_UI_002100_Admin_Language_Editor] ([TestCaseName], " +
                "[TestCaseID]) VALUES (@TestCaseName, @TestCaseID);\r\nSELECT TestCaseName, TestCas" +
                "eID FROM ZHRX_CAN_HR_UI_002100_Admin_Language_Editor WHERE (TestCaseID = @TestCa" +
                "seID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_002100_Admin_Language_Editor] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_002100_Admin_Language_Editor WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_002100_Admin_Language_Edi" +
                "tor";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_002100_Admin_Language_EditorDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_002100_Admin_Language_Editor");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_002200_Admin_Export_FTP";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_002200_Admin_Export_FTP] WHERE (([TestCaseName]" +
                " = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ZHRX_CAN_HR_UI_002200_Admin_Export_FTP] ([TestCaseName], [Test" +
                "CaseID]) VALUES (@TestCaseName, @TestCaseID);\r\nSELECT TestCaseName, TestCaseID F" +
                "ROM ZHRX_CAN_HR_UI_002200_Admin_Export_FTP WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_002200_Admin_Export_FTP] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_HR_UI_002200_Admin_Export_FTP WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_HR_UI_002200_Admin_Export_FTP";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_002200_Admin_Export_FTPDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_002200_Admin_Export_FTP");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("Admin_Options", "Admin_Options");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config] WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID) AND ((@IsNull_Admin_Options = 1 AND [Admin_Options] IS NULL) OR ([Admin_Options] = @Original_Admin_Options)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Admin_Options", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config] ([TestCaseName], [TestCaseID], [Admin_Options]) VALUES (@TestCaseName, @TestCaseID, @Admin_Options);
SELECT TestCaseName, TestCaseID, Admin_Options FROM ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID, [Admin_Options] = @Admin_Options WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID) AND ((@IsNull_Admin_Options = 1 AND [Admin_Options] IS NULL) OR ([Admin_Options] = @Original_Admin_Options)));
SELECT TestCaseName, TestCaseID, Admin_Options FROM ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Admin_Options", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID, Admin_Options FROM dbo.ZHRX_CAN_HR_UI_002300_Adm" +
                "in_Custom_Field_Config";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID, string Original_Admin_Options) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            if ((Original_Admin_Options == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Admin_Options));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID, string Admin_Options) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Admin_Options == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Admin_Options));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Admin_Options, string Original_TestCaseName, string Original_TestCaseID, string Original_Admin_Options) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Admin_Options == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Admin_Options));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_TestCaseID));
            }
            if ((Original_Admin_Options == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Admin_Options));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Admin_Options, string Original_TestCaseName, string Original_TestCaseID, string Original_Admin_Options) {
            return this.Update(TestCaseName, Original_TestCaseID, Admin_Options, Original_TestCaseName, Original_TestCaseID, Original_Admin_Options);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_002400_Admin_Security";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("Admin_Options", "Admin_Options");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ZHRX_CAN_HR_UI_002400_Admin_Security] WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID) AND ((@IsNull_Admin_Options = 1 AND [Admin_Options] IS NULL) OR ([Admin_Options] = @Original_Admin_Options)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Admin_Options", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_002400_Admin_Security] ([TestCaseName], [TestCaseID], [Admin_Options]) VALUES (@TestCaseName, @TestCaseID, @Admin_Options);
SELECT TestCaseName, TestCaseID, Admin_Options FROM ZHRX_CAN_HR_UI_002400_Admin_Security WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_002400_Admin_Security] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID, [Admin_Options] = @Admin_Options WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID) AND ((@IsNull_Admin_Options = 1 AND [Admin_Options] IS NULL) OR ([Admin_Options] = @Original_Admin_Options)));
SELECT TestCaseName, TestCaseID, Admin_Options FROM ZHRX_CAN_HR_UI_002400_Admin_Security WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Admin_Options", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Options", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID, Admin_Options FROM dbo.ZHRX_CAN_HR_UI_002400_Adm" +
                "in_Security";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_002400_Admin_SecurityDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_002400_Admin_Security");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID, string Original_Admin_Options) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            if ((Original_Admin_Options == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Admin_Options));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID, string Admin_Options) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Admin_Options == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Admin_Options));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Admin_Options, string Original_TestCaseName, string Original_TestCaseID, string Original_Admin_Options) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Admin_Options == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Admin_Options));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_TestCaseID));
            }
            if ((Original_Admin_Options == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Admin_Options));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Admin_Options, string Original_TestCaseName, string Original_TestCaseID, string Original_Admin_Options) {
            return this.Update(TestCaseName, Original_TestCaseID, Admin_Options, Original_TestCaseName, Original_TestCaseID, Original_Admin_Options);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_HR_UI_002500_HelpTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_HR_UI_002500_HelpTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_HR_UI_002500_Help";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("Help_Options", "Help_Options");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_HR_UI_002500_Help] WHERE (([TestCaseName] = @Original" +
                "_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID) AND ((@IsNull_Help_Opti" +
                "ons = 1 AND [Help_Options] IS NULL) OR ([Help_Options] = @Original_Help_Options)" +
                "))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Help_Options", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Help_Options", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Help_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Help_Options", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_HR_UI_002500_Help] ([TestCaseName], [TestCaseID], [Help_Options]) VALUES (@TestCaseName, @TestCaseID, @Help_Options);
SELECT TestCaseName, TestCaseID, Help_Options FROM ZHRX_CAN_HR_UI_002500_Help WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Help_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Help_Options", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_HR_UI_002500_Help] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID, [Help_Options] = @Help_Options WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID) AND ((@IsNull_Help_Options = 1 AND [Help_Options] IS NULL) OR ([Help_Options] = @Original_Help_Options)));
SELECT TestCaseName, TestCaseID, Help_Options FROM ZHRX_CAN_HR_UI_002500_Help WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Help_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Help_Options", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Help_Options", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Help_Options", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Help_Options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Help_Options", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID, Help_Options FROM dbo.ZHRX_CAN_HR_UI_002500_Help" +
                "";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_HR_UI_002500_HelpDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_HR_UI_002500_HelpDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_HR_UI_002500_HelpDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_HR_UI_002500_HelpDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_HR_UI_002500_HelpDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_HR_UI_002500_Help");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID, string Original_Help_Options) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            if ((Original_Help_Options == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Help_Options));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID, string Help_Options) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Help_Options == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Help_Options));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Help_Options, string Original_TestCaseName, string Original_TestCaseID, string Original_Help_Options) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Help_Options == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Help_Options));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_TestCaseID));
            }
            if ((Original_Help_Options == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Help_Options));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Help_Options, string Original_TestCaseName, string Original_TestCaseID, string Original_Help_Options) {
            return this.Update(TestCaseName, Original_TestCaseID, Help_Options, Original_TestCaseName, Original_TestCaseID, Original_Help_Options);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee] WHERE (([TestCaseNa" +
                "me] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee] ([TestCaseName], [T" +
                "estCaseID]) VALUES (@TestCaseName, @TestCaseID);\r\nSELECT TestCaseName, TestCaseI" +
                "D FROM ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee WHERE (TestCaseID = @TestCaseID" +
                ")";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employe" +
                "e";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record] WHERE (([Tes" +
                "tCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record] ([TestCaseName], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employe" +
                "e_record";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record] WHERE (" +
                "([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCase" +
                "ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record] ([TestCaseName], [TestCaseID]) VALUES (@TestCaseName, @TestCaseID);
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record WHERE (TestCaseID = @TestCaseID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record] SET [TestCaseName] = @TestCaseName, [TestCaseID] = @TestCaseID WHERE (([TestCaseName] = @Original_TestCaseName) AND ([TestCaseID] = @Original_TestCaseID));
SELECT TestCaseName, TestCaseID FROM ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record WHERE (TestCaseID = @TestCaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID FROM dbo.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Em" +
                "ployee_record";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TestCaseName, string Original_TestCaseID) {
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string TestCaseID, string Original_TestCaseName, string Original_TestCaseID) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Original_TestCaseName == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TestCaseName));
            }
            if ((Original_TestCaseID == null)) {
                throw new global::System.ArgumentNullException("Original_TestCaseID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TestCaseID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestCaseName, string Original_TestCaseName, string Original_TestCaseID) {
            return this.Update(TestCaseName, Original_TestCaseID, Original_TestCaseName, Original_TestCaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("User_Language", "User_Language");
            tableMapping.ColumnMappings.Add("User_Profile", "User_Profile");
            tableMapping.ColumnMappings.Add("Setup_Screen", "Setup_Screen");
            tableMapping.ColumnMappings.Add("Country", "Country");
            tableMapping.ColumnMappings.Add("Pay_Frequency", "Pay_Frequency");
            tableMapping.ColumnMappings.Add("Process_Group", "Process_Group");
            tableMapping.ColumnMappings.Add("English_Desc", "English_Desc");
            tableMapping.ColumnMappings.Add("French_Desc", "French_Desc");
            tableMapping.ColumnMappings.Add("Period", "Period");
            tableMapping.ColumnMappings.Add("Start_Date", "Start_Date");
            tableMapping.ColumnMappings.Add("Cutoff_Date", "Cutoff_Date");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group] ([TestCaseName], [TestCaseID], [User_Language], [User_Profile], [Setup_Screen], [Country], [Pay_Frequency], [Process_Group], [English_Desc], [French_Desc], [Period], [Start_Date], [Cutoff_Date]) VALUES (@TestCaseName, @TestCaseID, @User_Language, @User_Profile, @Setup_Screen, @Country, @Pay_Frequency, @Process_Group, @English_Desc, @French_Desc, @Period, @Start_Date, @Cutoff_Date)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Language", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Language", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Profile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Profile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Setup_Screen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Setup_Screen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Country", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pay_Frequency", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pay_Frequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Process_Group", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Process_Group", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@English_Desc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "English_Desc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@French_Desc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "French_Desc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Period", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Start_Date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cutoff_Date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cutoff_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID, User_Language, User_Profile, Setup_Screen, Count" +
                "ry, Pay_Frequency, Process_Group, English_Desc, French_Desc, Period, Start_Date," +
                " Cutoff_Date FROM dbo.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID, string User_Language, string User_Profile, string Setup_Screen, string Country, string Pay_Frequency, string Process_Group, string English_Desc, string French_Desc, string Period, string Start_Date, string Cutoff_Date) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((User_Language == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(User_Language));
            }
            if ((User_Profile == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(User_Profile));
            }
            if ((Setup_Screen == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Setup_Screen));
            }
            if ((Country == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Country));
            }
            if ((Pay_Frequency == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Pay_Frequency));
            }
            if ((Process_Group == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Process_Group));
            }
            if ((English_Desc == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(English_Desc));
            }
            if ((French_Desc == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(French_Desc));
            }
            if ((Period == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Period));
            }
            if ((Start_Date == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Start_Date));
            }
            if ((Cutoff_Date == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Cutoff_Date));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_Payroll_001200_Calculate_Payroll";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("Payroll_Screen", "Payroll_Screen");
            tableMapping.ColumnMappings.Add("User_Language", "User_Language");
            tableMapping.ColumnMappings.Add("User_Profile", "User_Profile");
            tableMapping.ColumnMappings.Add("Process_Group", "Process_Group");
            tableMapping.ColumnMappings.Add("Run_Type", "Run_Type");
            tableMapping.ColumnMappings.Add("Cheque_Date", "Cheque_Date");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_Payroll_001200_Calculate_Payroll] ([TestCaseName], [TestCaseID], [Payroll_Screen], [User_Language], [User_Profile], [Process_Group], [Run_Type], [Cheque_Date]) VALUES (@TestCaseName, @TestCaseID, @Payroll_Screen, @User_Language, @User_Profile, @Process_Group, @Run_Type, @Cheque_Date)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Payroll_Screen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Payroll_Screen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Language", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Language", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Profile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Profile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Process_Group", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Process_Group", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Run_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Run_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cheque_Date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cheque_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID, Payroll_Screen, User_Language, User_Profile, Pro" +
                "cess_Group, Run_Type, Cheque_Date FROM dbo.ZHRX_CAN_Payroll_001200_Calculate_Pay" +
                "roll";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_Payroll_001200_Calculate_PayrollDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_Payroll_001200_Calculate_Payroll");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID, string Payroll_Screen, string User_Language, string User_Profile, string Process_Group, string Run_Type, string Cheque_Date) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Payroll_Screen == null)) {
                throw new global::System.ArgumentNullException("Payroll_Screen");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Payroll_Screen));
            }
            if ((User_Language == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(User_Language));
            }
            if ((User_Profile == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(User_Profile));
            }
            if ((Process_Group == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Process_Group));
            }
            if ((Run_Type == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Run_Type));
            }
            if ((Cheque_Date == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Cheque_Date));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("User_Language", "User_Language");
            tableMapping.ColumnMappings.Add("User_Profile", "User_Profile");
            tableMapping.ColumnMappings.Add("Payroll_Screen", "Payroll_Screen");
            tableMapping.ColumnMappings.Add("Report_Type", "Report_Type");
            tableMapping.ColumnMappings.Add("Report_Name", "Report_Name");
            tableMapping.ColumnMappings.Add("Report_Format", "Report_Format");
            tableMapping.ColumnMappings.Add("ReportHeader_SP", "ReportHeader_SP");
            tableMapping.ColumnMappings.Add("SP_Params", "SP_Params");
            tableMapping.ColumnMappings.Add("ReportHeader_Val", "ReportHeader_Val");
            tableMapping.ColumnMappings.Add("ReportSection_SP", "ReportSection_SP");
            tableMapping.ColumnMappings.Add("Get_ColumnNames", "Get_ColumnNames");
            tableMapping.ColumnMappings.Add("ReportTotal_SP", "ReportTotal_SP");
            tableMapping.ColumnMappings.Add("Process_Group", "Process_Group");
            tableMapping.ColumnMappings.Add("Run_Type", "Run_Type");
            tableMapping.ColumnMappings.Add("Cheque_Date", "Cheque_Date");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding] ([TestCaseName], [TestCaseID], [User_Language], [User_Profile], [Payroll_Screen], [Report_Type], [Report_Name], [Report_Format], [ReportHeader_SP], [SP_Params], [ReportHeader_Val], [ReportSection_SP], [Get_ColumnNames], [ReportTotal_SP], [Process_Group], [Run_Type], [Cheque_Date]) VALUES (@TestCaseName, @TestCaseID, @User_Language, @User_Profile, @Payroll_Screen, @Report_Type, @Report_Name, @Report_Format, @ReportHeader_SP, @SP_Params, @ReportHeader_Val, @ReportSection_SP, @Get_ColumnNames, @ReportTotal_SP, @Process_Group, @Run_Type, @Cheque_Date)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Language", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Language", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Profile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Profile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Payroll_Screen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Payroll_Screen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Report_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Report_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Report_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Report_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Report_Format", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Report_Format", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportHeader_SP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportHeader_SP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SP_Params", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SP_Params", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportHeader_Val", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportHeader_Val", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportSection_SP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportSection_SP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Get_ColumnNames", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Get_ColumnNames", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportTotal_SP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportTotal_SP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Process_Group", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Process_Group", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Run_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Run_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cheque_Date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cheque_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT TestCaseName, TestCaseID, User_Language, User_Profile, Payroll_Screen, Report_Type, Report_Name, Report_Format, ReportHeader_SP, SP_Params, ReportHeader_Val, ReportSection_SP, Get_ColumnNames, ReportTotal_SP, Process_Group, Run_Type, Cheque_Date FROM dbo.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string TestCaseName, 
                    string TestCaseID, 
                    string User_Language, 
                    string User_Profile, 
                    string Payroll_Screen, 
                    string Report_Type, 
                    string Report_Name, 
                    string Report_Format, 
                    string ReportHeader_SP, 
                    string SP_Params, 
                    string ReportHeader_Val, 
                    string ReportSection_SP, 
                    string Get_ColumnNames, 
                    string ReportTotal_SP, 
                    string Process_Group, 
                    string Run_Type, 
                    string Cheque_Date) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((User_Language == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(User_Language));
            }
            if ((User_Profile == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(User_Profile));
            }
            if ((Payroll_Screen == null)) {
                throw new global::System.ArgumentNullException("Payroll_Screen");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Payroll_Screen));
            }
            if ((Report_Type == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Report_Type));
            }
            if ((Report_Name == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Report_Name));
            }
            if ((Report_Format == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Report_Format));
            }
            if ((ReportHeader_SP == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ReportHeader_SP));
            }
            if ((SP_Params == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(SP_Params));
            }
            if ((ReportHeader_Val == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ReportHeader_Val));
            }
            if ((ReportSection_SP == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ReportSection_SP));
            }
            if ((Get_ColumnNames == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Get_ColumnNames));
            }
            if ((ReportTotal_SP == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(ReportTotal_SP));
            }
            if ((Process_Group == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Process_Group));
            }
            if ((Run_Type == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(Run_Type));
            }
            if ((Cheque_Date == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(Cheque_Date));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("User_Language", "User_Language");
            tableMapping.ColumnMappings.Add("User_Profile", "User_Profile");
            tableMapping.ColumnMappings.Add("Payroll_Screen", "Payroll_Screen");
            tableMapping.ColumnMappings.Add("Report_Type", "Report_Type");
            tableMapping.ColumnMappings.Add("Report_Name", "Report_Name");
            tableMapping.ColumnMappings.Add("Report_Format", "Report_Format");
            tableMapping.ColumnMappings.Add("ReportHeader_SP", "ReportHeader_SP");
            tableMapping.ColumnMappings.Add("SP_Params", "SP_Params");
            tableMapping.ColumnMappings.Add("ReportHeader_Val", "ReportHeader_Val");
            tableMapping.ColumnMappings.Add("ReportSection_SP", "ReportSection_SP");
            tableMapping.ColumnMappings.Add("Get_ColumnNames", "Get_ColumnNames");
            tableMapping.ColumnMappings.Add("ReportTotal_SP", "ReportTotal_SP");
            tableMapping.ColumnMappings.Add("Process_Group", "Process_Group");
            tableMapping.ColumnMappings.Add("Run_Type", "Run_Type");
            tableMapping.ColumnMappings.Add("Cheque_Date", "Cheque_Date");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary] ([TestCaseName], [TestCaseID], [User_Language], [User_Profile], [Payroll_Screen], [Report_Type], [Report_Name], [Report_Format], [ReportHeader_SP], [SP_Params], [ReportHeader_Val], [ReportSection_SP], [Get_ColumnNames], [ReportTotal_SP], [Process_Group], [Run_Type], [Cheque_Date]) VALUES (@TestCaseName, @TestCaseID, @User_Language, @User_Profile, @Payroll_Screen, @Report_Type, @Report_Name, @Report_Format, @ReportHeader_SP, @SP_Params, @ReportHeader_Val, @ReportSection_SP, @Get_ColumnNames, @ReportTotal_SP, @Process_Group, @Run_Type, @Cheque_Date)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Language", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Language", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Profile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Profile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Payroll_Screen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Payroll_Screen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Report_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Report_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Report_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Report_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Report_Format", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Report_Format", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportHeader_SP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportHeader_SP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SP_Params", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SP_Params", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportHeader_Val", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportHeader_Val", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportSection_SP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportSection_SP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Get_ColumnNames", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Get_ColumnNames", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportTotal_SP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportTotal_SP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Process_Group", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Process_Group", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Run_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Run_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cheque_Date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cheque_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT TestCaseName, TestCaseID, User_Language, User_Profile, Payroll_Screen, Report_Type, Report_Name, Report_Format, ReportHeader_SP, SP_Params, ReportHeader_Val, ReportSection_SP, Get_ColumnNames, ReportTotal_SP, Process_Group, Run_Type, Cheque_Date FROM dbo.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string TestCaseName, 
                    string TestCaseID, 
                    string User_Language, 
                    string User_Profile, 
                    string Payroll_Screen, 
                    string Report_Type, 
                    string Report_Name, 
                    string Report_Format, 
                    string ReportHeader_SP, 
                    string SP_Params, 
                    string ReportHeader_Val, 
                    string ReportSection_SP, 
                    string Get_ColumnNames, 
                    string ReportTotal_SP, 
                    string Process_Group, 
                    string Run_Type, 
                    string Cheque_Date) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((User_Language == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(User_Language));
            }
            if ((User_Profile == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(User_Profile));
            }
            if ((Payroll_Screen == null)) {
                throw new global::System.ArgumentNullException("Payroll_Screen");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Payroll_Screen));
            }
            if ((Report_Type == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Report_Type));
            }
            if ((Report_Name == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Report_Name));
            }
            if ((Report_Format == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Report_Format));
            }
            if ((ReportHeader_SP == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ReportHeader_SP));
            }
            if ((SP_Params == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(SP_Params));
            }
            if ((ReportHeader_Val == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ReportHeader_Val));
            }
            if ((ReportSection_SP == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ReportSection_SP));
            }
            if ((Get_ColumnNames == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Get_ColumnNames));
            }
            if ((ReportTotal_SP == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(ReportTotal_SP));
            }
            if ((Process_Group == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Process_Group));
            }
            if ((Run_Type == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(Run_Type));
            }
            if ((Cheque_Date == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(Cheque_Date));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("User_Language", "User_Language");
            tableMapping.ColumnMappings.Add("User_Profile", "User_Profile");
            tableMapping.ColumnMappings.Add("Payroll_Screen", "Payroll_Screen");
            tableMapping.ColumnMappings.Add("Report_Type", "Report_Type");
            tableMapping.ColumnMappings.Add("Report_Name", "Report_Name");
            tableMapping.ColumnMappings.Add("Report_Format", "Report_Format");
            tableMapping.ColumnMappings.Add("Report_SP", "Report_SP");
            tableMapping.ColumnMappings.Add("SP_Params", "SP_Params");
            tableMapping.ColumnMappings.Add("Report_Val", "Report_Val");
            tableMapping.ColumnMappings.Add("Process_Group", "Process_Group");
            tableMapping.ColumnMappings.Add("Run_Type", "Run_Type");
            tableMapping.ColumnMappings.Add("Cheque_Date", "Cheque_Date");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes] ([TestCaseName], [TestCaseID], [User_Language], [User_Profile], [Payroll_Screen], [Report_Type], [Report_Name], [Report_Format], [Report_SP], [SP_Params], [Report_Val], [Process_Group], [Run_Type], [Cheque_Date]) VALUES (@TestCaseName, @TestCaseID, @User_Language, @User_Profile, @Payroll_Screen, @Report_Type, @Report_Name, @Report_Format, @Report_SP, @SP_Params, @Report_Val, @Process_Group, @Run_Type, @Cheque_Date)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Language", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Language", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Profile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Profile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Payroll_Screen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Payroll_Screen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Report_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Report_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Report_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Report_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Report_Format", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Report_Format", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Report_SP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Report_SP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SP_Params", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SP_Params", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Report_Val", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Report_Val", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Process_Group", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Process_Group", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Run_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Run_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cheque_Date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cheque_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID, User_Language, User_Profile, Payroll_Screen, Rep" +
                "ort_Type, Report_Name, Report_Format, Report_SP, SP_Params, Report_Val, Process_" +
                "Group, Run_Type, Cheque_Date FROM dbo.ZHRX_CAN_Payroll_001600_Verify_Standard_Re" +
                "ports_Changes";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID, string User_Language, string User_Profile, string Payroll_Screen, string Report_Type, string Report_Name, string Report_Format, string Report_SP, string SP_Params, string Report_Val, string Process_Group, string Run_Type, string Cheque_Date) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((User_Language == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(User_Language));
            }
            if ((User_Profile == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(User_Profile));
            }
            if ((Payroll_Screen == null)) {
                throw new global::System.ArgumentNullException("Payroll_Screen");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Payroll_Screen));
            }
            if ((Report_Type == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Report_Type));
            }
            if ((Report_Name == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Report_Name));
            }
            if ((Report_Format == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Report_Format));
            }
            if ((Report_SP == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Report_SP));
            }
            if ((SP_Params == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(SP_Params));
            }
            if ((Report_Val == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Report_Val));
            }
            if ((Process_Group == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Process_Group));
            }
            if ((Run_Type == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Run_Type));
            }
            if ((Cheque_Date == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Cheque_Date));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period";
            tableMapping.ColumnMappings.Add("TestCaseName", "TestCaseName");
            tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
            tableMapping.ColumnMappings.Add("Payroll_Screen", "Payroll_Screen");
            tableMapping.ColumnMappings.Add("User_Language", "User_Language");
            tableMapping.ColumnMappings.Add("User_Profile", "User_Profile");
            tableMapping.ColumnMappings.Add("Process_Group", "Process_Group");
            tableMapping.ColumnMappings.Add("Run_Type", "Run_Type");
            tableMapping.ColumnMappings.Add("Cheque_Date", "Cheque_Date");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period] ([TestCaseName], [TestCaseID], [Payroll_Screen], [User_Language], [User_Profile], [Process_Group], [Run_Type], [Cheque_Date]) VALUES (@TestCaseName, @TestCaseID, @Payroll_Screen, @User_Language, @User_Profile, @Process_Group, @Run_Type, @Cheque_Date)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Payroll_Screen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Payroll_Screen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Language", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Language", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@User_Profile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "User_Profile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Process_Group", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Process_Group", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Run_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Run_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cheque_Date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cheque_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WL.TestAuto.Properties.Settings.Default.testautomationioCnn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestCaseName, TestCaseID, Payroll_Screen, User_Language, User_Profile, Pro" +
                "cess_Group, Run_Type, Cheque_Date FROM dbo.ZHRX_CAN_Payroll_Reports_001000_Run_p" +
                "ayroll_for_available_Pay_Period";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(testautomationioDataSet.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual testautomationioDataSet.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            testautomationioDataSet.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable dataTable = new testautomationioDataSet.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(testautomationioDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TestCaseName, string TestCaseID, string Payroll_Screen, string User_Language, string User_Profile, string Process_Group, string Run_Type, string Cheque_Date) {
            if ((TestCaseName == null)) {
                throw new global::System.ArgumentNullException("TestCaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TestCaseName));
            }
            if ((TestCaseID == null)) {
                throw new global::System.ArgumentNullException("TestCaseID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestCaseID));
            }
            if ((Payroll_Screen == null)) {
                throw new global::System.ArgumentNullException("Payroll_Screen");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Payroll_Screen));
            }
            if ((User_Language == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(User_Language));
            }
            if ((User_Profile == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(User_Profile));
            }
            if ((Process_Group == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Process_Group));
            }
            if ((Run_Type == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Run_Type));
            }
            if ((Cheque_Date == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Cheque_Date));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private Phase2TestSuiteTableAdapter _phase2TestSuiteTableAdapter;
        
        private SmokeTestSuiteTableAdapter _smokeTestSuiteTableAdapter;
        
        private ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter _zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter;
        
        private ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter _zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter;
        
        private ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter _zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter;
        
        private ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter _zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter;
        
        private ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter _zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter;
        
        private ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter _zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter;
        
        private ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter _zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter;
        
        private ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter _zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter;
        
        private ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter _zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter;
        
        private ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter _zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter;
        
        private ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter _zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter;
        
        private ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter _zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter;
        
        private ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter _zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter;
        
        private ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter _zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter;
        
        private ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter _zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter;
        
        private ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter _zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter;
        
        private ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter _zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter;
        
        private ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter _zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter;
        
        private ZHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter _zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter;
        
        private ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter _zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter;
        
        private ZHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter _zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter;
        
        private ZHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter _zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter;
        
        private ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter _zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter;
        
        private ZHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter _zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter;
        
        private ZHRX_CAN_HR_UI_002500_HelpTableAdapter _zHRX_CAN_HR_UI_002500_HelpTableAdapter;
        
        private ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter _zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter;
        
        private ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter _zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter;
        
        private ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter _zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter;
        
        private ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter _zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter;
        
        private ZHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter _zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter;
        
        private ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter _zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter;
        
        private ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter _zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter;
        
        private ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter _zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter;
        
        private ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter _zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Phase2TestSuiteTableAdapter Phase2TestSuiteTableAdapter {
            get {
                return this._phase2TestSuiteTableAdapter;
            }
            set {
                this._phase2TestSuiteTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public SmokeTestSuiteTableAdapter SmokeTestSuiteTableAdapter {
            get {
                return this._smokeTestSuiteTableAdapter;
            }
            set {
                this._smokeTestSuiteTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter ZHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter ZHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter ZHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter ZHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter ZHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter ZHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter ZHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter ZHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter ZHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter ZHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter ZHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter ZHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_HR_UI_002500_HelpTableAdapter ZHRX_CAN_HR_UI_002500_HelpTableAdapter {
            get {
                return this._zHRX_CAN_HR_UI_002500_HelpTableAdapter;
            }
            set {
                this._zHRX_CAN_HR_UI_002500_HelpTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter ZHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter {
            get {
                return this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter;
            }
            set {
                this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter {
            get {
                return this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter;
            }
            set {
                this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter {
            get {
                return this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter;
            }
            set {
                this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter {
            get {
                return this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter;
            }
            set {
                this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter ZHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter {
            get {
                return this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter;
            }
            set {
                this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter {
            get {
                return this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter;
            }
            set {
                this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter {
            get {
                return this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter;
            }
            set {
                this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter {
            get {
                return this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter;
            }
            set {
                this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter {
            get {
                return this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter;
            }
            set {
                this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._phase2TestSuiteTableAdapter != null) 
                            && (this._phase2TestSuiteTableAdapter.Connection != null))) {
                    return this._phase2TestSuiteTableAdapter.Connection;
                }
                if (((this._smokeTestSuiteTableAdapter != null) 
                            && (this._smokeTestSuiteTableAdapter.Connection != null))) {
                    return this._smokeTestSuiteTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_HR_UI_002500_HelpTableAdapter != null) 
                            && (this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter != null) 
                            && (this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter != null) 
                            && (this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter != null) 
                            && (this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter != null) 
                            && (this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter != null) 
                            && (this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter != null) 
                            && (this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter != null) 
                            && (this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter != null) 
                            && (this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Connection;
                }
                if (((this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter != null) 
                            && (this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Connection != null))) {
                    return this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._phase2TestSuiteTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._smokeTestSuiteTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_HR_UI_002500_HelpTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateUpdatedRows(testautomationioDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._phase2TestSuiteTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Phase2TestSuite.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._phase2TestSuiteTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_001900_Admin_Code_System.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_002100_Admin_Language_Editor.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_002200_Admin_Export_FTP.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_002400_Admin_Security.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002500_HelpTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_002500_Help.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_Payroll_001200_Calculate_Payroll.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._smokeTestSuiteTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SmokeTestSuite.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._smokeTestSuiteTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateInsertedRows(testautomationioDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._phase2TestSuiteTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Phase2TestSuite.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._phase2TestSuiteTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_001900_Admin_Code_System.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_002100_Admin_Language_Editor.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_002200_Admin_Export_FTP.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_002400_Admin_Security.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002500_HelpTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_002500_Help.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_Payroll_001200_Calculate_Payroll.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._smokeTestSuiteTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SmokeTestSuite.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._smokeTestSuiteTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateDeletedRows(testautomationioDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_Period.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_Payroll_001600_Verify_Standard_Reports_Changes.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_Group.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_001300_Setup_Screen_Vendor.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_001200_Setup_Screen_Entitlement.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_001100_Setup_Screen_Policy.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_001000_Payroll_Screen_Reports.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_000900_Payroll_Screen_Import.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_000800_Payroll_Screen_Payments.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcess.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_Transaction.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_Screen.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_Screen.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_French.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_English.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_Screen.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._smokeTestSuiteTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SmokeTestSuite.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._smokeTestSuiteTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_Level.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_Template.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_001700_Setup_Screen_Paycode.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_NEW_HIRE_001000_Hire_an_Employee.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_Summary.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_Funding.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_Payroll_001200_Calculate_Payroll.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_Payroll_001000_Create_Payroll_Processing_Group.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_record.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_record.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002500_HelpTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_002500_Help.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_001800_Admin_Code_Maintenance.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_002400_Admin_Security.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_002300_Admin_Custom_Field_Config.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_002200_Admin_Export_FTP.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_002100_Admin_Language_Editor.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_Editor.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ZHRX_CAN_HR_UI_001900_Admin_Code_System.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._phase2TestSuiteTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Phase2TestSuite.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._phase2TestSuiteTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public virtual int UpdateAll(testautomationioDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._phase2TestSuiteTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._phase2TestSuiteTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._smokeTestSuiteTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._smokeTestSuiteTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_HR_UI_002500_HelpTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._phase2TestSuiteTableAdapter != null)) {
                    revertConnections.Add(this._phase2TestSuiteTableAdapter, this._phase2TestSuiteTableAdapter.Connection);
                    this._phase2TestSuiteTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._phase2TestSuiteTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._phase2TestSuiteTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._phase2TestSuiteTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._phase2TestSuiteTableAdapter.Adapter);
                    }
                }
                if ((this._smokeTestSuiteTableAdapter != null)) {
                    revertConnections.Add(this._smokeTestSuiteTableAdapter, this._smokeTestSuiteTableAdapter.Connection);
                    this._smokeTestSuiteTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._smokeTestSuiteTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._smokeTestSuiteTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._smokeTestSuiteTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._smokeTestSuiteTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter, this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter, this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter, this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter, this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter, this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter, this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter, this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter, this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter, this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter, this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter, this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter, this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter, this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter, this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter, this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter, this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter, this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter, this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter, this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter, this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter, this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter, this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter, this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter, this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_HR_UI_002500_HelpTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_HR_UI_002500_HelpTableAdapter, this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Connection);
                    this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter, this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Connection);
                    this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter, this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Connection);
                    this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter, this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Connection);
                    this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter, this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Connection);
                    this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter, this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Connection);
                    this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter, this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Connection);
                    this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter, this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Connection);
                    this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter, this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Connection);
                    this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Adapter);
                    }
                }
                if ((this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter != null)) {
                    revertConnections.Add(this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter, this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Connection);
                    this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._phase2TestSuiteTableAdapter != null)) {
                    this._phase2TestSuiteTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._phase2TestSuiteTableAdapter]));
                    this._phase2TestSuiteTableAdapter.Transaction = null;
                }
                if ((this._smokeTestSuiteTableAdapter != null)) {
                    this._smokeTestSuiteTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._smokeTestSuiteTableAdapter]));
                    this._smokeTestSuiteTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter]));
                    this._zHRX_CAN_HR_UI_000100_Verify_Human_Resources_Employee_ScreenTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter]));
                    this._zHRX_CAN_HR_UI_000200_Verify_Human_Resources_HR_Screen_Open_Screens_In_EnglishTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter]));
                    this._zHRX_CAN_HR_UI_000300_HR_Screen_Open_Screens_In_FrenchTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter]));
                    this._zHRX_CAN_HR_UI_000400_Payroll_Screen_Employee_ScreenTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter]));
                    this._zHRX_CAN_HR_UI_000500_Payroll_Screen_Batch_ScreenTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter]));
                    this._zHRX_CAN_HR_UI_000600_Payroll_Screen_Payroll_TransactionTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter]));
                    this._zHRX_CAN_HR_UI_000700_Payroll_Screen_PayrollProcessTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter]));
                    this._zHRX_CAN_HR_UI_000800_Payroll_Screen_PaymentsTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter]));
                    this._zHRX_CAN_HR_UI_000900_Payroll_Screen_ImportTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter]));
                    this._zHRX_CAN_HR_UI_001000_Payroll_Screen_ReportsTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter]));
                    this._zHRX_CAN_HR_UI_001100_Setup_Screen_PolicyTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter]));
                    this._zHRX_CAN_HR_UI_001200_Setup_Screen_EntitlementTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter]));
                    this._zHRX_CAN_HR_UI_001300_Setup_Screen_VendorTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter]));
                    this._zHRX_CAN_HR_UI_001400_Setup_Screen_Payroll_Processing_GroupTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter]));
                    this._zHRX_CAN_HR_UI_001500_Setup_Screen_Organizational_Unit_LevelTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter]));
                    this._zHRX_CAN_HR_UI_001600_Setup_Screen_Wizard_TemplateTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter]));
                    this._zHRX_CAN_HR_UI_001700_Setup_Screen_PaycodeTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter]));
                    this._zHRX_CAN_HR_UI_001800_Admin_Code_MaintenanceTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter]));
                    this._zHRX_CAN_HR_UI_001900_Admin_Code_SystemTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter]));
                    this._zHRX_CAN_HR_UI_002000_Admin_Mandatory_Field_EditorTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter]));
                    this._zHRX_CAN_HR_UI_002100_Admin_Language_EditorTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter]));
                    this._zHRX_CAN_HR_UI_002200_Admin_Export_FTPTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter]));
                    this._zHRX_CAN_HR_UI_002300_Admin_Custom_Field_ConfigTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter]));
                    this._zHRX_CAN_HR_UI_002400_Admin_SecurityTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_HR_UI_002500_HelpTableAdapter != null)) {
                    this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_HR_UI_002500_HelpTableAdapter]));
                    this._zHRX_CAN_HR_UI_002500_HelpTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter != null)) {
                    this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter]));
                    this._zHRX_CAN_NEW_HIRE_001000_Hire_an_EmployeeTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter != null)) {
                    this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter]));
                    this._zHRX_CAN_NEW_HIRE_001100_Edit_an_Employee_recordTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter != null)) {
                    this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter]));
                    this._zHRX_CAN_NEW_HIRE_001200_Terminate_an_Employee_recordTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter != null)) {
                    this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter]));
                    this._zHRX_CAN_Payroll_001000_Create_Payroll_Processing_GroupTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter != null)) {
                    this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter]));
                    this._zHRX_CAN_Payroll_001200_Calculate_PayrollTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter != null)) {
                    this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter]));
                    this._zHRX_CAN_Payroll_001300_Verify_Standard_Reports_Payroll_FundingTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter != null)) {
                    this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter]));
                    this._zHRX_CAN_Payroll_001400_Verify_Standard_Reports_Register_Detail_Register_SummaryTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter != null)) {
                    this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter]));
                    this._zHRX_CAN_Payroll_001600_Verify_Standard_Reports_ChangesTableAdapter.Transaction = null;
                }
                if ((this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter != null)) {
                    this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter]));
                    this._zHRX_CAN_Payroll_Reports_001000_Run_payroll_for_available_Pay_PeriodTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591